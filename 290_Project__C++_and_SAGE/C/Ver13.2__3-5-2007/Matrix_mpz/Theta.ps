%!PS-Adobe-2.0
%%DocumentFonts: Courier Times-Bold
%%Title: Theta.cc (mpage)
%%Creator: mpage 2.5.4 May 2004
%%CreationDate: Mon Aug  8 21:37:23 2005
%%Orientation: Landscape
%%DocumentMedia: Letter 612 792
%%BoundingBox: 40 18 594 752
%%Pages: (atend)
%%EndComments

%%BeginProlog

/mp_stm usertime def
/mp_pgc statusdict begin pagecount end def
statusdict begin /jobname (Theta.cc) def end
/reencsmalldict 12 dict def /ReEncodeSmall { reencsmalldict begin
/newcodesandnames exch def /newfontname exch def /basefontname exch def
/basefontdict basefontname findfont def /newfont basefontdict maxlength dict def
basefontdict { exch dup /FID ne { dup /Encoding eq { exch dup length array copy newfont 3 1 roll put } { exch newfont 3 1 roll put }
ifelse }
  { pop pop }
  ifelse } forall
newfont /FontName newfontname put
newcodesandnames aload pop newcodesandnames length 2 idiv
{ newfont /Encoding get 3 1 roll put } repeat
newfontname newfont definefont pop end } def
/charvec [
026 /Scaron
027 /Ydieresis
028 /Zcaron
029 /scaron
030 /trademark
031 /zcaron
032 /space
033 /exclam
034 /quotedbl
035 /numbersign
036 /dollar
037 /percent
038 /ampersand
039 /quoteright
040 /parenleft
041 /parenright
042 /asterisk
043 /plus
044 /comma
045 /minus
046 /period
047 /slash
048 /zero
049 /one
050 /two
051 /three
052 /four
053 /five
054 /six
055 /seven
056 /eight
057 /nine
058 /colon
059 /semicolon
060 /less
061 /equal
062 /greater
063 /question
064 /at
065 /A
066 /B
067 /C
068 /D
069 /E
070 /F
071 /G
072 /H
073 /I
074 /J
075 /K
076 /L
077 /M
078 /N
079 /O
080 /P
081 /Q
082 /R
083 /S
084 /T
085 /U
086 /V
087 /W
088 /X
089 /Y
090 /Z
091 /bracketleft
092 /backslash
093 /bracketright
094 /asciicircum
095 /underscore
096 /quoteleft
097 /a
098 /b
099 /c
100 /d
101 /e
102 /f
103 /g
104 /h
105 /i
106 /j
107 /k
108 /l
109 /m
110 /n
111 /o
112 /p
113 /q
114 /r
115 /s
116 /t
117 /u
118 /v
119 /w
120 /x
121 /y
122 /z
123 /braceleft
124 /bar
125 /braceright
126 /asciitilde
127 /.notdef
128 /fraction
129 /florin
130 /quotesingle
131 /quotedblleft
132 /guilsinglleft
133 /guilsinglright
134 /fi
135 /fl
136 /endash
137 /dagger
138 /daggerdbl
139 /bullet
140 /quotesinglbase
141 /quotedblbase
142 /quotedblright
143 /ellipsis
144 /dotlessi
145 /grave
146 /acute
147 /circumflex
148 /tilde
149 /oe
150 /breve
151 /dotaccent
152 /perthousand
153 /emdash
154 /ring
155 /Lslash
156 /OE
157 /hungarumlaut
158 /ogonek
159 /caron
160 /lslash
161 /exclamdown
162 /cent
163 /sterling
164 /currency
165 /yen
166 /brokenbar
167 /section
168 /dieresis
169 /copyright
170 /ordfeminine
171 /guillemotleft
172 /logicalnot
173 /hyphen
174 /registered
175 /macron
176 /degree
177 /plusminus
178 /twosuperior
179 /threesuperior
180 /acute
181 /mu
182 /paragraph
183 /periodcentered
184 /cedilla
185 /onesuperior
186 /ordmasculine
187 /guillemotright
188 /onequarter
189 /onehalf
190 /threequarters
191 /questiondown
192 /Agrave
193 /Aacute
194 /Acircumflex
195 /Atilde
196 /Adieresis
197 /Aring
198 /AE
199 /Ccedilla
200 /Egrave
201 /Eacute
202 /Ecircumflex
203 /Edieresis
204 /Igrave
205 /Iacute
206 /Icircumflex
207 /Idieresis
208 /Eth
209 /Ntilde
210 /Ograve
211 /Oacute
212 /Ocircumflex
213 /Otilde
214 /Odieresis
215 /multiply
216 /Oslash
217 /Ugrave
218 /Uacute
219 /Ucircumflex
220 /Udieresis
221 /Yacute
222 /Thorn
223 /germandbls
224 /agrave
225 /aacute
226 /acircumflex
227 /atilde
228 /adieresis
229 /aring
230 /ae
231 /ccedilla
232 /egrave
233 /eacute
234 /ecircumflex
235 /edieresis
236 /igrave
237 /iacute
238 /icircumflex
239 /idieresis
240 /eth
241 /ntilde
242 /ograve
243 /oacute
244 /ocircumflex
245 /otilde
246 /odieresis
247 /divide
248 /oslash
249 /ugrave
250 /uacute
251 /ucircumflex
252 /udieresis
253 /yacute
254 /thorn
255 /ydieresis
] def
/Courier /OurCharSet charvec ReEncodeSmall
/textfont /OurCharSet findfont 11 scalefont def
/textfontbold /OurCharSet-Bold findfont 11 scalefont def
/fnamefont /Times-Bold findfont 14 scalefont def
/headerfont /Times-Bold findfont 12 scalefont def
textfont setfont
(a) stringwidth pop /mp_a_x exch def
/kanj /Ryumin-Light-H findfont 11 scalefont def
/han /Ryumin-Light.Hankaku findfont 11 scalefont def
/unijis /Ryumin-Light-UniJIS-UTF8-H findfont 11 scalefont def
/uniks /Baekmuk-Batang-UniKS-UTF8-H findfont 11 scalefont def
/unigb /BousungEG-Light-GB-UniGB-UTF8-H findfont 11 scalefont def
/unicns /ShanHeiSun-Light-UniCNS-UTF8-H findfont 11 scalefont def
%%EndProlog
%%Page: 1 1
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 1) stringwidth pop sub 3 sub 796 moveto (Page 1) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
0 768 moveto (PowerSeries<mpz_class> Theta_PARI_1\(const Matrix_mpz & Q, const mpz_class & prec) show
0 756 moveto (ision\) {) show
2 mp_a_x mul 732 moveto (// Sanity check that the precision fits inside an unsigned long) show
2 mp_a_x mul 720 moveto (assert\(precision.fits_ulong_p\(\) == true\);) show
2 mp_a_x mul 684 moveto (PowerSeries<mpz_class> Theta_Series\(precision.get_ui\(\)\);) show
2 mp_a_x mul 660 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 648 moveto (!) show
2 mp_a_x mul 612 moveto (// Compute the theta function ) show
2 mp_a_x mul 600 moveto (GEN T = qfrep0\(Matrix_mpz__to__PARI\(Q\), stoi\(2*precision.get_ui\(\)\), 0\);) show
2 mp_a_x mul 576 moveto (// Write to thte theta series) show
2 mp_a_x mul 564 moveto (Theta_Series[0] = 1;) show
2 mp_a_x mul 552 moveto (for\(unsigned long i = 1; i<=precision.get_ui\(\); i++\)) show
4 mp_a_x mul 540 moveto (Theta_Series[i] =  2 * mpz_class\(itos\(compo\(T,2*i\)\)\);  // This assumes we ne) show
0 528 moveto (ver overflow the long!) show
2 mp_a_x mul 492 moveto (return Theta_Series;) show
0 468 moveto (}) show
0 432 moveto (boolean_theta Theta_PARI_2\(const Matrix_mpz & Q, const mpz_class & precision\) {) show
2 mp_a_x mul 396 moveto (// Sanity check that the precision fits inside an unsigned long -- so the comp) show
0 384 moveto (utation isn't *way* too long!) show
2 mp_a_x mul 372 moveto (assert\(precision.fits_ulong_p\(\) == true\);) show
2 mp_a_x mul 336 moveto (boolean_theta Theta_Series\(Q, precision\);) show
2 mp_a_x mul 312 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 300 moveto (!) show
2 mp_a_x mul 276 moveto (/*) show
2 mp_a_x mul 264 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 252 moveto (output\(Matrix_mpz__to__PARI\(Q\)\);) show
2 mp_a_x mul 240 moveto (output\(stoi\(precision\)\);) show
2 mp_a_x mul 228 moveto (*/) show
2 mp_a_x mul 204 moveto (// Compute the theta function ) show
2 mp_a_x mul 192 moveto (GEN T = qfrep0\(Matrix_mpz__to__PARI\(Q\), stoi\(2*precision.get_ui\(\)\), 0\);) show
2 mp_a_x mul 168 moveto (// Write to the theta series) show
2 mp_a_x mul 156 moveto (Theta_Series.set_value\(0\);) show
2 mp_a_x mul 144 moveto (for\(mpz_class i = 1; i<=precision; i++\)) show
4 mp_a_x mul 132 moveto (if \(gcmp0\(compo\(T,2*i.get_ui\(\)\)\) == false\)) show
6 mp_a_x mul 120 moveto (Theta_Series.set_value\(i\);) show
2 mp_a_x mul 84 moveto (return Theta_Series;) show
0 60 moveto (}) show
0 24 moveto (// Compute the theta function by importing \(and simplifying\) the original PARI c) show
0 12 moveto (ode!) show
0 0 moveto (PowerSeries<mpz_class> Theta_PARI_1_new\(const Matrix_mpz & Q, const mpz_class & ) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 2) stringwidth pop sub 3 sub 796 moveto (Page 2) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
0 780 moveto (precision\) {) show
2 mp_a_x mul 756 moveto (// Sanity check that the precision fits inside an unsigned long) show
2 mp_a_x mul 744 moveto (assert\(precision.fits_ulong_p\(\) == true\);) show
2 mp_a_x mul 708 moveto (// Make the theta series, and set zero.) show
2 mp_a_x mul 696 moveto (PowerSeries<mpz_class> Theta_Series\(precision.get_ui\(\)\);) show
2 mp_a_x mul 684 moveto (Theta_Series[0] = 1;) show
2 mp_a_x mul 660 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 648 moveto (!) show
2 mp_a_x mul 636 moveto (extern pari_sp avma;) show
2 mp_a_x mul 612 moveto (// PARI Stack placeholder) show
2 mp_a_x mul 600 moveto (pari_sp av0 = avma;) show
2 mp_a_x mul 564 moveto (// Make an array of double for the Cholesky decompostion of our matrix) show
2 mp_a_x mul 552 moveto (GEN A = Matrix_mpz__to__PARI\(Q\);) show
2 mp_a_x mul 528 moveto (// Compute the LLL Basis for A) show
2 mp_a_x mul 516 moveto (GEN U = lllgramint\(A\);) show
2 mp_a_x mul 504 moveto (/*) show
4 mp_a_x mul 492 moveto (// DIAGNSOTIC:) show
4 mp_a_x mul 480 moveto (cout << " lg\(U\) = " << lg\(U\) << endl;) show
4 mp_a_x mul 468 moveto (cout << " Q.NumRows\(\) = " << Q.NumRows\(\) << endl;) show
2 mp_a_x mul 456 moveto (*/) show
2 mp_a_x mul 444 moveto (if \(lg\(U\) != Q.NumRows\(\)+1\) ) show
4 mp_a_x mul 432 moveto (err\(talker, "Dude, your matrix is not positive definite! =\("\);) show
2 mp_a_x mul 408 moveto (// Put A in LLL reduced form) show
2 mp_a_x mul 396 moveto (//A = U^T * A * U) show
2 mp_a_x mul 384 moveto (A = qf_base_change\(A,U,1\);) show
2 mp_a_x mul 360 moveto (// Compute the Cholesky decomposition of A) show
2 mp_a_x mul 348 moveto (GEN R = sqred\(A\);) show
2 mp_a_x mul 288 moveto (// --------------------------------------------) show
2 mp_a_x mul 252 moveto (// Delare some local variables) show
2 mp_a_x mul 240 moveto (long n = Q.NumRows\(\), i, j, k;) show
2 mp_a_x mul 228 moveto (double p, BOUND, eps = 0.000001;) show
2 mp_a_x mul 216 moveto (BOUND =  2*\(\(double\) precision.get_d\(\)\) + eps; ) show
2 mp_a_x mul 180 moveto (// Convert R into doubles...) show
2 mp_a_x mul 168 moveto (vector<long> x\(n+1\);      // Note: This is ok as long since it maxes out at 2 ) show
0 156 moveto (* 10^9, which gives precision at least 4 * 10^18! =\)) show
2 mp_a_x mul 144 moveto (vector<double> v\(n+1\), y\(n+1\), z\(n+1\);) show
2 mp_a_x mul 132 moveto (vector< vector <double> > q\(n+1\);) show
2 mp_a_x mul 120 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 108 moveto (q[i].resize\(n+1\);) show
2 mp_a_x mul 72 moveto (/*) show
2 mp_a_x mul 60 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 48 moveto (cout << "Starting the conversion..." << endl;) show
2 mp_a_x mul 36 moveto (output\(R\);) show
2 mp_a_x mul 24 moveto (cout << " n = " << n << endl;) show
2 mp_a_x mul 12 moveto (*/) show
grestore
restore
showpage
%%Page: 2 2
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 3) stringwidth pop sub 3 sub 796 moveto (Page 3) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (// Set v and q) show
2 mp_a_x mul 768 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 756 moveto (v[i] = gtodouble\(gcoeff\(R,i,i\)\);) show
2 mp_a_x mul 744 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 732 moveto (for\(long j=i+1; j<=n; j++\) {      ) show
6 mp_a_x mul 720 moveto (q[i][j] = gtodouble\(gcoeff\(R,i,j\)\);) show
6 mp_a_x mul 708 moveto (//cout << "Q[" << i << "][" << j << "] = " << q[i][j] << endl;) show
4 mp_a_x mul 696 moveto (}) show
2 mp_a_x mul 660 moveto (/*) show
2 mp_a_x mul 648 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 636 moveto (cout << " v = " << v << endl;) show
2 mp_a_x mul 624 moveto (cout << " q = " << q << endl;) show
2 mp_a_x mul 612 moveto (*/) show
2 mp_a_x mul 564 moveto (// Reset the PARI stack) show
2 mp_a_x mul 552 moveto (avma = av0;) show
2 mp_a_x mul 504 moveto (/*) show
2 mp_a_x mul 492 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 480 moveto (cout << " Precision = " << precision << endl;  // WARNING: This is a unsigned ) show
0 468 moveto (long, so its biggest value is about 4.2 * 10^9 !) show
2 mp_a_x mul 456 moveto (cout << " BOUND = " << BOUND << endl;) show
2 mp_a_x mul 444 moveto (*/) show
2 mp_a_x mul 384 moveto (// Set some bounds before starting the main loop) show
2 mp_a_x mul 372 moveto (k = n; y[n] = z[n] = 0;) show
2 mp_a_x mul 360 moveto (x[n] = \(long\) ceil\(sqrt\(BOUND/v[n]\)\);) show
2 mp_a_x mul 336 moveto (/*) show
2 mp_a_x mul 324 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 312 moveto (cout << " BOUND/v[n] = " << BOUND/v[n] << endl;) show
2 mp_a_x mul 300 moveto (cout << " sqrt\(BOUND/v[n]\) = " << sqrt\(BOUND/v[n]\) << endl;) show
2 mp_a_x mul 288 moveto (cout << " ceil\(sqrt\(BOUND/v[n]\)\) = " << ceil\(sqrt\(BOUND/v[n]\)\) << endl;) show
2 mp_a_x mul 276 moveto (cout << " \(long\) ceil\(sqrt\(BOUND/v[n]\)\) = " << \(\(long\) ceil\(sqrt\(BOUND/v[n]\)\)\)) show
mp_a_x 264 moveto (<< endl;) show
2 mp_a_x mul 252 moveto (*/) show
2 mp_a_x mul 204 moveto (// Compute the theta function) show
2 mp_a_x mul 192 moveto (for\(;;x[1]--\)) show
2 mp_a_x mul 180 moveto ({) show
4 mp_a_x mul 168 moveto (do) show
4 mp_a_x mul 156 moveto ({) show
6 mp_a_x mul 144 moveto (/*) show
6 mp_a_x mul 132 moveto (cout << " x = " << x << endl;) show
6 mp_a_x mul 120 moveto (*/) show
6 mp_a_x mul 96 moveto (// Set more components of x, and the auxilliary y and z.) show
6 mp_a_x mul 84 moveto (if \(k>1\)) show
6 mp_a_x mul 72 moveto ({) show
8 mp_a_x mul 60 moveto (long l = k-1;) show
8 mp_a_x mul 36 moveto (z[l] = 0;) show
8 mp_a_x mul 24 moveto (for \(j=k; j<=n; j++\) z[l] += q[l][j]*x[j];) show
8 mp_a_x mul 0 moveto (p = \(double\) x[k] + z[k];) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 4) stringwidth pop sub 3 sub 796 moveto (Page 4) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
8 mp_a_x mul 780 moveto (y[l] = y[k] + p*p*v[k];) show
8 mp_a_x mul 756 moveto (x[l] = \(long\) floor\(sqrt\(\(BOUND-y[l]\)/v[l]\)-z[l]\);) show
8 mp_a_x mul 744 moveto (k = l;) show
6 mp_a_x mul 732 moveto (}) show
6 mp_a_x mul 708 moveto (// Check that so far the partial Q\(x\) is small enough) show
6 mp_a_x mul 696 moveto (for\(;;\)) show
6 mp_a_x mul 684 moveto ({) show
8 mp_a_x mul 672 moveto (p = \(double\) x[k] + z[k];) show
8 mp_a_x mul 660 moveto (if \(y[k] + p*p*v[k] <= BOUND\) break;) show
8 mp_a_x mul 648 moveto (k++; x[k]--;) show
6 mp_a_x mul 636 moveto (}) show
4 mp_a_x mul 624 moveto (}) show
4 mp_a_x mul 612 moveto (while \(k > 1\);) show
4 mp_a_x mul 576 moveto (// Here we have a valid vector x, with Q\(x\) <= precision ) show
4 mp_a_x mul 564 moveto (if \(! x[1] && y[1]<=eps\) break;) show
4 mp_a_x mul 528 moveto (// Compute Q\(x\)) show
4 mp_a_x mul 516 moveto (p = \(double\) x[1] + z[1]; ) show
4 mp_a_x mul 504 moveto (p = y[1] + p*p*v[1];   ) show
4 mp_a_x mul 480 moveto (// Set the entry in out Theta_Series) show
4 mp_a_x mul 468 moveto (ulong norm = \(ulong\)\(p/2 + 0.5\);        // This does the appropriate roundin) show
0 456 moveto (g! =\)) show
4 mp_a_x mul 444 moveto (Theta_Series[norm] +=  2;) show
4 mp_a_x mul 420 moveto (// NICE SANITY CHECK FOR LARGE NUMBERS: We could test each p to make sure it) show
0 408 moveto ('s even! =\)) show
2 mp_a_x mul 384 moveto (}) show
2 mp_a_x mul 348 moveto (return Theta_Series;) show
0 324 moveto (}) show
0 288 moveto (// Compute the theta function by importing \(and simplifying\) the original PARI c) show
0 276 moveto (ode!) show
0 264 moveto (boolean_theta Theta_PARI_2_new\(const Matrix_mpz & Q, const mpz_class & precision) show
0 252 moveto (\) {) show
2 mp_a_x mul 228 moveto (// Make the theta series, and set zero.) show
2 mp_a_x mul 216 moveto (boolean_theta Theta_Series\(Q, precision\);    // WARNING: This assumes the prec) show
0 204 moveto (ision of half of the maximum allowed!  ) show
2 mp_a_x mul 192 moveto (Theta_Series.set_value\(0\);) show
2 mp_a_x mul 168 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 156 moveto (!) show
2 mp_a_x mul 144 moveto (extern pari_sp avma;) show
2 mp_a_x mul 120 moveto (// PARI Stack placeholder) show
2 mp_a_x mul 108 moveto (pari_sp av0 = avma;) show
2 mp_a_x mul 72 moveto (// Make an array of double for the Cholesky decompostion of our matrix) show
2 mp_a_x mul 60 moveto (GEN A = Matrix_mpz__to__PARI\(Q\);) show
2 mp_a_x mul 36 moveto (// Compute the LLL Basis for A) show
2 mp_a_x mul 24 moveto (GEN U = lllgramint\(A\);) show
2 mp_a_x mul 12 moveto (/*) show
4 mp_a_x mul 0 moveto (// DIAGNSOTIC:) show
grestore
restore
showpage
%%Page: 3 3
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 5) stringwidth pop sub 3 sub 796 moveto (Page 5) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
4 mp_a_x mul 780 moveto (cout << " lg\(U\) = " << lg\(U\) << endl;) show
4 mp_a_x mul 768 moveto (cout << " Q.NumRows\(\) = " << Q.NumRows\(\) << endl;) show
2 mp_a_x mul 756 moveto (*/) show
2 mp_a_x mul 744 moveto (if \(lg\(U\) != Q.NumRows\(\)+1\) ) show
4 mp_a_x mul 732 moveto (err\(talker, "Dude, your matrix is not positive definite! =\("\);) show
2 mp_a_x mul 708 moveto (// Put A in LLL reduced form) show
2 mp_a_x mul 696 moveto (//A = U^T * A * U) show
2 mp_a_x mul 684 moveto (A = qf_base_change\(A,U,1\);) show
2 mp_a_x mul 660 moveto (// Compute the Cholesky decomposition of A) show
2 mp_a_x mul 648 moveto (GEN R = sqred\(A\);) show
2 mp_a_x mul 588 moveto (// --------------------------------------------) show
2 mp_a_x mul 552 moveto (// Delare some local variables) show
2 mp_a_x mul 540 moveto (long n = Q.NumRows\(\), i, j, k;) show
2 mp_a_x mul 528 moveto (double p, BOUND, eps = 0.000001;) show
2 mp_a_x mul 516 moveto (BOUND =  2*\(\(double\) precision.get_d\(\)\) + eps; ) show
2 mp_a_x mul 480 moveto (// Convert R into doubles...) show
2 mp_a_x mul 468 moveto (vector<long> x\(n+1\);      // Note: This is ok as long since it maxes out at 2 ) show
0 456 moveto (* 10^9, which gives precision at least 4 * 10^18! =\)) show
2 mp_a_x mul 444 moveto (vector<double> v\(n+1\), y\(n+1\), z\(n+1\);) show
2 mp_a_x mul 432 moveto (vector< vector <double> > q\(n+1\);) show
2 mp_a_x mul 420 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 408 moveto (q[i].resize\(n+1\);) show
2 mp_a_x mul 372 moveto (/*) show
2 mp_a_x mul 360 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 348 moveto (cout << "Starting the conversion..." << endl;) show
2 mp_a_x mul 336 moveto (output\(R\);) show
2 mp_a_x mul 324 moveto (cout << " n = " << n << endl;) show
2 mp_a_x mul 312 moveto (*/) show
2 mp_a_x mul 288 moveto (// Set v and q) show
2 mp_a_x mul 276 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 264 moveto (v[i] = gtodouble\(gcoeff\(R,i,i\)\);) show
2 mp_a_x mul 252 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 240 moveto (for\(long j=i+1; j<=n; j++\) {      ) show
6 mp_a_x mul 228 moveto (q[i][j] = gtodouble\(gcoeff\(R,i,j\)\);) show
6 mp_a_x mul 216 moveto (//cout << "Q[" << i << "][" << j << "] = " << q[i][j] << endl;) show
4 mp_a_x mul 204 moveto (}) show
2 mp_a_x mul 168 moveto (/*) show
2 mp_a_x mul 156 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 144 moveto (cout << " v = " << v << endl;) show
2 mp_a_x mul 132 moveto (cout << " q = " << q << endl;) show
2 mp_a_x mul 120 moveto (*/) show
2 mp_a_x mul 72 moveto (// Reset the PARI stack) show
2 mp_a_x mul 60 moveto (avma = av0;) show
2 mp_a_x mul 12 moveto (/*) show
2 mp_a_x mul 0 moveto (// DIAGNOSTIC) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 6) stringwidth pop sub 3 sub 796 moveto (Page 6) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (cout << " Precision = " << precision << endl;  // WARNING: This is a unsigned ) show
0 768 moveto (long, so its biggest value is about 4.2 * 10^9 !) show
2 mp_a_x mul 756 moveto (cout << " BOUND = " << BOUND << endl;) show
2 mp_a_x mul 744 moveto (*/) show
2 mp_a_x mul 684 moveto (// Set some bounds before starting the main loop) show
2 mp_a_x mul 672 moveto (k = n; y[n] = z[n] = 0;) show
2 mp_a_x mul 660 moveto (x[n] = \(long\) ceil\(sqrt\(BOUND/v[n]\)\);) show
2 mp_a_x mul 636 moveto (/*) show
2 mp_a_x mul 624 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 612 moveto (cout << " BOUND/v[n] = " << BOUND/v[n] << endl;) show
2 mp_a_x mul 600 moveto (cout << " sqrt\(BOUND/v[n]\) = " << sqrt\(BOUND/v[n]\) << endl;) show
2 mp_a_x mul 588 moveto (cout << " ceil\(sqrt\(BOUND/v[n]\)\) = " << ceil\(sqrt\(BOUND/v[n]\)\) << endl;) show
2 mp_a_x mul 576 moveto (cout << " \(long\) ceil\(sqrt\(BOUND/v[n]\)\) = " << \(\(long\) ceil\(sqrt\(BOUND/v[n]\)\)\)) show
mp_a_x 564 moveto (<< endl;) show
2 mp_a_x mul 552 moveto (*/) show
2 mp_a_x mul 504 moveto (// Compute the theta function) show
2 mp_a_x mul 492 moveto (for\(;;x[1]--\)) show
2 mp_a_x mul 480 moveto ({) show
4 mp_a_x mul 468 moveto (do) show
4 mp_a_x mul 456 moveto ({) show
6 mp_a_x mul 444 moveto (/*) show
6 mp_a_x mul 432 moveto (cout << " x = " << x << endl;) show
6 mp_a_x mul 420 moveto (*/) show
6 mp_a_x mul 396 moveto (// Set more components of x, and the auxilliary y and z.) show
6 mp_a_x mul 384 moveto (if \(k>1\)) show
6 mp_a_x mul 372 moveto ({) show
8 mp_a_x mul 360 moveto (long l = k-1;) show
8 mp_a_x mul 336 moveto (z[l] = 0;) show
8 mp_a_x mul 324 moveto (for \(j=k; j<=n; j++\) z[l] += q[l][j]*x[j];) show
8 mp_a_x mul 300 moveto (p = \(double\) x[k] + z[k];) show
8 mp_a_x mul 288 moveto (y[l] = y[k] + p*p*v[k];) show
8 mp_a_x mul 264 moveto (x[l] = \(long\) floor\(sqrt\(\(BOUND-y[l]\)/v[l]\)-z[l]\);) show
8 mp_a_x mul 252 moveto (k = l;) show
6 mp_a_x mul 240 moveto (}) show
6 mp_a_x mul 216 moveto (// Check that so far the partial Q\(x\) is small enough) show
6 mp_a_x mul 204 moveto (for\(;;\)) show
6 mp_a_x mul 192 moveto ({) show
8 mp_a_x mul 180 moveto (p = \(double\) x[k] + z[k];) show
8 mp_a_x mul 168 moveto (if \(y[k] + p*p*v[k] <= BOUND\) break;) show
8 mp_a_x mul 156 moveto (k++; x[k]--;) show
6 mp_a_x mul 144 moveto (}) show
4 mp_a_x mul 132 moveto (}) show
4 mp_a_x mul 120 moveto (while \(k > 1\);) show
4 mp_a_x mul 84 moveto (// Here we have a valid vector x, with Q\(x\) <= precision ) show
4 mp_a_x mul 72 moveto (if \(! x[1] && y[1]<=eps\) break;) show
4 mp_a_x mul 36 moveto (// Compute Q\(x\)) show
4 mp_a_x mul 24 moveto (p = \(double\) x[1] + z[1]; ) show
4 mp_a_x mul 12 moveto (p = y[1] + p*p*v[1];   ) show
grestore
restore
showpage
%%Page: 4 4
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 7) stringwidth pop sub 3 sub 796 moveto (Page 7) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
4 mp_a_x mul 780 moveto (// Set the entry in out Theta_Series) show
4 mp_a_x mul 768 moveto (mpz_class norm = mpz_class\(p/2 + 0.5\);        // This does the appropriate r) show
0 756 moveto (ounding! =\)) show
4 mp_a_x mul 744 moveto (Theta_Series.set_value\(norm\);) show
4 mp_a_x mul 720 moveto (// NICE SANITY CHECK FOR LARGE NUMBERS: We could test each p to make sure it) show
0 708 moveto ('s even! =\)) show
2 mp_a_x mul 684 moveto (}) show
2 mp_a_x mul 648 moveto (return Theta_Series;) show
0 624 moveto (}) show
0 564 moveto (// Compute the theta function by importing \(and simplifying\) the original PARI c) show
0 552 moveto (ode!) show
0 540 moveto (boolean_theta Theta_PARI_2_new_Approximate\(const Matrix_mpz & Q, const mpz_class) show
mp_a_x 528 moveto (& precision, const float & approx_size\) {) show
2 mp_a_x mul 504 moveto (// Make the theta series, and set zero.) show
2 mp_a_x mul 492 moveto (boolean_theta Theta_Series\(Q, precision\);    // WARNING: This assumes the prec) show
0 480 moveto (ision of half of the maximum allowed!  ) show
2 mp_a_x mul 468 moveto (Theta_Series.set_value\(0\);) show
2 mp_a_x mul 444 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 432 moveto (!) show
2 mp_a_x mul 420 moveto (extern pari_sp avma;) show
2 mp_a_x mul 396 moveto (// PARI Stack placeholder) show
2 mp_a_x mul 384 moveto (pari_sp av0 = avma;) show
2 mp_a_x mul 348 moveto (// Make an array of double for the Cholesky decompostion of our matrix) show
2 mp_a_x mul 336 moveto (GEN A = Matrix_mpz__to__PARI\(Q\);) show
2 mp_a_x mul 312 moveto (// Compute the LLL Basis for A) show
2 mp_a_x mul 300 moveto (GEN U = lllgramint\(A\);) show
2 mp_a_x mul 288 moveto (/*) show
4 mp_a_x mul 276 moveto (// DIAGNSOTIC:) show
4 mp_a_x mul 264 moveto (cout << " lg\(U\) = " << lg\(U\) << endl;) show
4 mp_a_x mul 252 moveto (cout << " Q.NumRows\(\) = " << Q.NumRows\(\) << endl;) show
2 mp_a_x mul 240 moveto (*/) show
2 mp_a_x mul 228 moveto (if \(lg\(U\) != Q.NumRows\(\)+1\) ) show
4 mp_a_x mul 216 moveto (err\(talker, "Dude, your matrix is not positive definite! =\("\);) show
2 mp_a_x mul 192 moveto (// Put A in LLL reduced form) show
2 mp_a_x mul 180 moveto (//A = U^T * A * U) show
2 mp_a_x mul 168 moveto (A = qf_base_change\(A,U,1\);) show
2 mp_a_x mul 156 moveto (cout << " The LLL reduction of this matrix is given by:" << endl;) show
2 mp_a_x mul 144 moveto (outmat\(A\);) show
2 mp_a_x mul 120 moveto (// Compute the Cholesky decomposition of A) show
2 mp_a_x mul 108 moveto (GEN R = sqred\(A\);) show
2 mp_a_x mul 48 moveto (// --------------------------------------------) show
2 mp_a_x mul 12 moveto (// Delare some local variables) show
2 mp_a_x mul 0 moveto (long n = Q.NumRows\(\), i, j, k;) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 8) stringwidth pop sub 3 sub 796 moveto (Page 8) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (double p, BOUND, eps = 0.000001;) show
2 mp_a_x mul 768 moveto (BOUND =  2 * precision.get_d\(\) + eps; ) show
2 mp_a_x mul 732 moveto (// Convert R into doubles...) show
2 mp_a_x mul 720 moveto (vector<long> x\(n+1\);      // Note: This is ok as long since it maxes out at 2 ) show
0 708 moveto (* 10^9, which gives precision at least 4 * 10^18! =\)) show
2 mp_a_x mul 696 moveto (vector<double> v\(n+1\), y\(n+1\), z\(n+1\);) show
2 mp_a_x mul 684 moveto (vector< vector <double> > q\(n+1\);) show
2 mp_a_x mul 672 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 660 moveto (q[i].resize\(n+1\);) show
2 mp_a_x mul 624 moveto (/*) show
2 mp_a_x mul 612 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 600 moveto (cout << "Starting the conversion..." << endl;) show
2 mp_a_x mul 588 moveto (output\(R\);) show
2 mp_a_x mul 576 moveto (cout << " n = " << n << endl;) show
2 mp_a_x mul 564 moveto (*/) show
2 mp_a_x mul 540 moveto (// Set v and q) show
2 mp_a_x mul 528 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 516 moveto (v[i] = gtodouble\(gcoeff\(R,i,i\)\);) show
2 mp_a_x mul 504 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 492 moveto (for\(long j=i+1; j<=n; j++\) {      ) show
6 mp_a_x mul 480 moveto (q[i][j] = gtodouble\(gcoeff\(R,i,j\)\);) show
6 mp_a_x mul 468 moveto (//cout << "Q[" << i << "][" << j << "] = " << q[i][j] << endl;) show
4 mp_a_x mul 456 moveto (}) show
2 mp_a_x mul 420 moveto (/*) show
2 mp_a_x mul 408 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 396 moveto (cout << " v = " << v << endl;) show
2 mp_a_x mul 384 moveto (cout << " q = " << q << endl;) show
2 mp_a_x mul 372 moveto (*/) show
2 mp_a_x mul 324 moveto (// Reset the PARI stack) show
2 mp_a_x mul 312 moveto (avma = av0;) show
2 mp_a_x mul 264 moveto (/*) show
2 mp_a_x mul 252 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 240 moveto (cout << " Precision = " << precision << endl;  // WARNING: This is a unsigned ) show
0 228 moveto (long, so its biggest value is about 4.2 * 10^9 !) show
2 mp_a_x mul 216 moveto (cout << " BOUND = " << BOUND << endl;) show
2 mp_a_x mul 204 moveto (*/) show
2 mp_a_x mul 156 moveto (// Check for a precision overflow \(10^12\)) show
2 mp_a_x mul 144 moveto (mpz_class THOUSAND\(1000\);) show
2 mp_a_x mul 132 moveto (mpz_class PRECISON_OVERFLOW = THOUSAND * THOUSAND * THOUSAND * THOUSAND;) show
2 mp_a_x mul 120 moveto (assert\( precision <= PRECISON_OVERFLOW\);    // THIS NEEDS TO BE MODIFIED TO DE) show
0 108 moveto (CIDE THE CORRECT CUTOFF!! =\)) show
2 mp_a_x mul 48 moveto (// Set some bounds before starting the main loop) show
2 mp_a_x mul 36 moveto (float APPROX_SIZE = approx_size;                              // THIS DETERMIN) show
0 24 moveto (ES THE AMOUNT WE TRUNCATE IN THE APPROXIMATE ROUTINE! \(Default = 500.\)) show
2 mp_a_x mul 12 moveto (k = n; y[n] = z[n] = 0;) show
2 mp_a_x mul 0 moveto (x[n] = \(long\) ceil\(sqrt\(BOUND/v[n]\)\);) show
grestore
restore
showpage
%%Page: 5 5
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 9) stringwidth pop sub 3 sub 796 moveto (Page 9) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 768 moveto (//   /*) show
2 mp_a_x mul 756 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 744 moveto (cout << " BOUND/v[n] = " << BOUND/v[n] << endl;) show
2 mp_a_x mul 732 moveto (cout << " sqrt\(BOUND/v[n]\) = " << sqrt\(BOUND/v[n]\) << endl;) show
2 mp_a_x mul 720 moveto (cout << " ceil\(sqrt\(BOUND/v[n]\)\) = " << ceil\(sqrt\(BOUND/v[n]\)\) << endl;) show
2 mp_a_x mul 708 moveto (cout << " \(long\) ceil\(sqrt\(BOUND/v[n]\)\) = " << \(\(long\) ceil\(sqrt\(BOUND/v[n]\)\)\)) show
mp_a_x 696 moveto (<< endl;) show
2 mp_a_x mul 684 moveto (//   */) show
2 mp_a_x mul 636 moveto (// Compute the theta function) show
2 mp_a_x mul 624 moveto (for\(;;x[1]--\)) show
2 mp_a_x mul 612 moveto ({) show
4 mp_a_x mul 600 moveto (// DIAGNOSTIC) show
4 mp_a_x mul 588 moveto (cout << " Using x[1] = " << x[1] << endl;) show
4 mp_a_x mul 576 moveto (cout << " Using x = " << x << endl;) show
4 mp_a_x mul 564 moveto (PrintTime\(\);) show
4 mp_a_x mul 540 moveto (do) show
4 mp_a_x mul 528 moveto ({) show
6 mp_a_x mul 516 moveto (/*) show
6 mp_a_x mul 504 moveto (cout << " x = " << x << endl;) show
6 mp_a_x mul 492 moveto (*/) show
6 mp_a_x mul 468 moveto (// Set more components of x, and the auxilliary y and z.) show
6 mp_a_x mul 456 moveto (if \(k>1\)) show
6 mp_a_x mul 444 moveto ({) show
8 mp_a_x mul 432 moveto (long l = k-1;) show
8 mp_a_x mul 408 moveto (z[l] = 0;) show
8 mp_a_x mul 396 moveto (for \(j=k; j<=n; j++\) z[l] += q[l][j]*x[j];) show
8 mp_a_x mul 372 moveto (p = \(double\) x[k] + z[k];) show
8 mp_a_x mul 360 moveto (y[l] = y[k] + p*p*v[k];) show
8 mp_a_x mul 336 moveto (x[l] = \(long\) min\( floor\(sqrt\(\(BOUND-y[l]\)/v[l]\)-z[l]\), APPROX_SIZE-z[l]) show
mp_a_x 324 moveto (\);     // THIS MAKES IT APPROXIMATE FROM ABOVE!!!) show
8 mp_a_x mul 312 moveto (k = l;) show
6 mp_a_x mul 300 moveto (}) show
6 mp_a_x mul 276 moveto (// Check that so far the partial Q\(x\) is small enough) show
6 mp_a_x mul 264 moveto (for\(;;\)) show
6 mp_a_x mul 252 moveto ({) show
8 mp_a_x mul 240 moveto (p = \(double\) x[k] + z[k];) show
8 mp_a_x mul 228 moveto (if \( \(k == n\) || \( \(k != n\) && \(p >= -APPROX_SIZE\) \) \)              // T) show
0 216 moveto (HIS MAKES IT APPROXIMATE FROM BELOW!!!) show
10 mp_a_x mul 204 moveto (if \(y[k] + p*p*v[k] <= BOUND\) break;) show
8 mp_a_x mul 192 moveto (k++; x[k]--;) show
6 mp_a_x mul 180 moveto (}) show
4 mp_a_x mul 156 moveto (}) show
4 mp_a_x mul 144 moveto (while \(k > 1\);) show
4 mp_a_x mul 108 moveto (// Here we have a valid vector x, with Q\(x\) <= precision ) show
4 mp_a_x mul 96 moveto (if \(! x[1] && y[1]<=eps\) break;) show
4 mp_a_x mul 60 moveto (// Compute Q\(x\)) show
4 mp_a_x mul 48 moveto (p = \(double\) x[1] + z[1]; ) show
4 mp_a_x mul 36 moveto (p = y[1] + p*p*v[1];   ) show
4 mp_a_x mul 0 moveto (// SANITY \(parity\) CHECK ) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 10) stringwidth pop sub 3 sub 796 moveto (Page 10) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
4 mp_a_x mul 780 moveto (// Check to see if the roundoff error is enough to make an odd number.) show
4 mp_a_x mul 768 moveto (// \(This should detect roughly half of the roundoff errors!\)) show
4 mp_a_x mul 756 moveto (mpz_class even_testnum = mpz_class\(p + 0.5\);) show
4 mp_a_x mul 744 moveto (assert\(even_testnum % 2 == 0\);) show
4 mp_a_x mul 708 moveto (// Set the entry in our Theta_Series) show
4 mp_a_x mul 696 moveto (//    cout << " About to set the value for p = " << p << endl; ) show
4 mp_a_x mul 684 moveto (mpz_class norm = mpz_class\(p/2 + 0.5\);        // This does the appropriate r) show
0 672 moveto (ounding! =\)) show
4 mp_a_x mul 660 moveto (//    cout << " Converted p/2 into the number norm = " << norm << endl;) show
4 mp_a_x mul 648 moveto (Theta_Series.set_value\(norm\);) show
4 mp_a_x mul 636 moveto (/*) show
4 mp_a_x mul 624 moveto (cout << " Finished setting the index for ThetaSeries[" << norm << "]" << end) show
0 612 moveto (l;) show
4 mp_a_x mul 600 moveto (cout << endl << endl;) show
4 mp_a_x mul 588 moveto (*/) show
4 mp_a_x mul 564 moveto (// NICE SANITY CHECK FOR LARGE NUMBERS: We could test each p to make sure it) show
0 552 moveto ('s even! =\)) show
2 mp_a_x mul 528 moveto (}) show
2 mp_a_x mul 492 moveto (return Theta_Series;) show
0 468 moveto (}) show
0 384 moveto (// Compute the theta function by importing \(and simplifying\) the original PARI c) show
0 372 moveto (ode!) show
0 360 moveto (boolean_theta Theta_PARI_3_new_Approximate_Ternary\(const Matrix_mpz & Q, const m) show
0 348 moveto (pz_class & precision, const float & approx_size\) {) show
2 mp_a_x mul 324 moveto (// Make the theta series, and set zero.) show
2 mp_a_x mul 312 moveto (boolean_theta Theta_Series\(Q, precision\);    // WARNING: This assumes the prec) show
0 300 moveto (ision of half of the maximum allowed!  ) show
2 mp_a_x mul 288 moveto (Theta_Series.set_value\(0\);) show
2 mp_a_x mul 264 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 252 moveto (!) show
2 mp_a_x mul 240 moveto (extern pari_sp avma;) show
2 mp_a_x mul 216 moveto (// PARI Stack placeholder) show
2 mp_a_x mul 204 moveto (pari_sp av0 = avma;) show
2 mp_a_x mul 168 moveto (// Make an array of double for the Cholesky decompostion of our matrix) show
2 mp_a_x mul 156 moveto (GEN A = Matrix_mpz__to__PARI\(Q\);) show
2 mp_a_x mul 132 moveto (// Compute the LLL Basis for A) show
2 mp_a_x mul 120 moveto (GEN U = lllgramint\(A\);) show
2 mp_a_x mul 108 moveto (/*) show
4 mp_a_x mul 96 moveto (// DIAGNSOTIC:) show
4 mp_a_x mul 84 moveto (cout << " lg\(U\) = " << lg\(U\) << endl;) show
4 mp_a_x mul 72 moveto (cout << " Q.NumRows\(\) = " << Q.NumRows\(\) << endl;) show
2 mp_a_x mul 60 moveto (*/) show
2 mp_a_x mul 48 moveto (if \(lg\(U\) != Q.NumRows\(\)+1\) ) show
4 mp_a_x mul 36 moveto (err\(talker, "Dude, your matrix is not positive definite! =\("\);) show
2 mp_a_x mul 12 moveto (// Put A in LLL reduced form) show
2 mp_a_x mul 0 moveto (//A = U^T * A * U) show
grestore
restore
showpage
%%Page: 6 6
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 11) stringwidth pop sub 3 sub 796 moveto (Page 11) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (A = qf_base_change\(A,U,1\);) show
2 mp_a_x mul 768 moveto (cout << " The LLL reduction of this matrix is given by:" << endl;) show
2 mp_a_x mul 756 moveto (outmat\(A\);) show
2 mp_a_x mul 732 moveto (// Compute the Cholesky decomposition of A) show
2 mp_a_x mul 720 moveto (GEN R = sqred\(A\);) show
2 mp_a_x mul 660 moveto (// --------------------------------------------) show
2 mp_a_x mul 624 moveto (// Delare some local variables) show
2 mp_a_x mul 612 moveto (long n = Q.NumRows\(\), i, j, k;) show
2 mp_a_x mul 600 moveto (double p, BOUND, eps = 0.000001;) show
2 mp_a_x mul 588 moveto (double Val;) show
2 mp_a_x mul 576 moveto (BOUND =  2 * precision.get_d\(\) + eps; ) show
2 mp_a_x mul 540 moveto (// Convert R into doubles...) show
2 mp_a_x mul 528 moveto (vector<long> x\(n+1\);      // Note: This is ok as long since it maxes out at 2 ) show
0 516 moveto (* 10^9, which gives precision at least 4 * 10^18! =\)) show
2 mp_a_x mul 504 moveto (vector<double> v\(n+1\), y\(n+1\), z\(n+1\);) show
2 mp_a_x mul 492 moveto (vector< vector <double> > q\(n+1\);) show
2 mp_a_x mul 480 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 468 moveto (q[i].resize\(n+1\);) show
2 mp_a_x mul 432 moveto (/*) show
2 mp_a_x mul 420 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 408 moveto (cout << "Starting the conversion..." << endl;) show
2 mp_a_x mul 396 moveto (output\(R\);) show
2 mp_a_x mul 384 moveto (cout << " n = " << n << endl;) show
2 mp_a_x mul 372 moveto (*/) show
2 mp_a_x mul 348 moveto (// Set v and q) show
2 mp_a_x mul 336 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 324 moveto (v[i] = gtodouble\(gcoeff\(R,i,i\)\);) show
2 mp_a_x mul 312 moveto (for\(long i=1; i<=n; i++\)) show
4 mp_a_x mul 300 moveto (for\(long j=i+1; j<=n; j++\) {      ) show
6 mp_a_x mul 288 moveto (q[i][j] = gtodouble\(gcoeff\(R,i,j\)\);) show
6 mp_a_x mul 276 moveto (//cout << "Q[" << i << "][" << j << "] = " << q[i][j] << endl;) show
4 mp_a_x mul 264 moveto (}) show
2 mp_a_x mul 228 moveto (/*) show
2 mp_a_x mul 216 moveto (// DIAGNSOTIC:) show
2 mp_a_x mul 204 moveto (cout << " v = " << v << endl;) show
2 mp_a_x mul 192 moveto (cout << " q = " << q << endl;) show
2 mp_a_x mul 180 moveto (*/) show
2 mp_a_x mul 132 moveto (// Reset the PARI stack) show
2 mp_a_x mul 120 moveto (avma = av0;) show
2 mp_a_x mul 72 moveto (/*) show
2 mp_a_x mul 60 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 48 moveto (cout << " Precision = " << precision << endl;  // WARNING: This is a unsigned ) show
0 36 moveto (long, so its biggest value is about 4.2 * 10^9 !) show
2 mp_a_x mul 24 moveto (cout << " BOUND = " << BOUND << endl;) show
2 mp_a_x mul 12 moveto (*/) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 12) stringwidth pop sub 3 sub 796 moveto (Page 12) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 756 moveto (// Check for a precision overflow \(10^12\)) show
2 mp_a_x mul 744 moveto (mpz_class THOUSAND\(1000\);) show
2 mp_a_x mul 732 moveto (mpz_class PRECISON_OVERFLOW = THOUSAND * THOUSAND * THOUSAND * THOUSAND;) show
2 mp_a_x mul 720 moveto (assert\( precision <= PRECISON_OVERFLOW\);    // THIS NEEDS TO BE MODIFIED TO DE) show
0 708 moveto (CIDE THE CORRECT CUTOFF!! =\)) show
2 mp_a_x mul 648 moveto (// Set some bounds before starting the main loop) show
2 mp_a_x mul 636 moveto (float APPROX_SIZE = approx_size;   // THIS DETERMINES THE AMOUNT WE TRUNCATE I) show
0 624 moveto (N THE APPROXIMATE ROUTINE! \(Default = 500.\)) show
2 mp_a_x mul 612 moveto (//  k = n; y[n] = z[n] = 0;) show
2 mp_a_x mul 600 moveto (//x[n] = \(long\) ceil\(sqrt\(BOUND/v[n]\)\);) show
2 mp_a_x mul 576 moveto (//   /*) show
2 mp_a_x mul 564 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 552 moveto (cout << " BOUND/v[n] = " << BOUND/v[n] << endl;) show
2 mp_a_x mul 540 moveto (cout << " sqrt\(BOUND/v[n]\) = " << sqrt\(BOUND/v[n]\) << endl;) show
2 mp_a_x mul 528 moveto (cout << " ceil\(sqrt\(BOUND/v[n]\)\) = " << ceil\(sqrt\(BOUND/v[n]\)\) << endl;) show
2 mp_a_x mul 516 moveto (cout << " \(long\) ceil\(sqrt\(BOUND/v[n]\)\) = " << \(\(long\) ceil\(sqrt\(BOUND/v[n]\)\)\)) show
mp_a_x 504 moveto (<< endl;) show
2 mp_a_x mul 492 moveto (//   */) show
2 mp_a_x mul 456 moveto (// Sanity Check -- make sure it's a ternary form!) show
2 mp_a_x mul 444 moveto (assert\(n==3\);) show
2 mp_a_x mul 420 moveto (// Loop through all vectors in the cylinder to make the approximate theta func) show
0 408 moveto (tion! =\)) show
2 mp_a_x mul 396 moveto (// ---------------------------------------------------------------------------) show
0 384 moveto (--------) show
2 mp_a_x mul 372 moveto (for\(x[3] = \(long\) ceil\(sqrt\(BOUND/v[3]\)\); x[3] >= 0; x[3]--\) {) show
4 mp_a_x mul 348 moveto (// Make the cumulative value y[2] from x[3]) show
4 mp_a_x mul 336 moveto (p = \(double\) x[3];) show
4 mp_a_x mul 324 moveto (y[2] = p*p * v[3];) show
4 mp_a_x mul 288 moveto (for\(x[2] = 0; x[2] <= APPROX_SIZE; x[2]++\) {) show
6 mp_a_x mul 264 moveto (// Make the cumulative value y[1] from x and y[2]) show
6 mp_a_x mul 252 moveto (p = \(\(double\) x[2]\)  +  q[2][3] * \(\(double\) x[3]\);) show
6 mp_a_x mul 240 moveto (y[1] = p*p * v[2];) show
6 mp_a_x mul 204 moveto (for\(x[1] = 0; x[1] <= APPROX_SIZE; x[1]++\) {) show
8 mp_a_x mul 180 moveto (// Make the cumulative value Val from x and y[1]) show
8 mp_a_x mul 168 moveto (p = \(\(double\) x[1]\)  +  q[1][2] * \(\(double\) x[2]\)   +  q[1][3] * \(\(doubl) show
0 156 moveto (e\) x[3]\);) show
8 mp_a_x mul 144 moveto (Val = p*p * v[1];) show
8 mp_a_x mul 120 moveto (/*) show
8 mp_a_x mul 108 moveto (// DIAGNOSTIC:) show
8 mp_a_x mul 96 moveto (cout << " Using x = " << x << endl;) show
8 mp_a_x mul 84 moveto (cout << " x[1] = " << x[1] << endl;) show
8 mp_a_x mul 72 moveto (cout << " x[2] = " << x[2] << endl;) show
8 mp_a_x mul 60 moveto (cout << " x[3] = " << x[3] << endl;) show
8 mp_a_x mul 48 moveto (cout << " This has value " << Val << endl;) show
8 mp_a_x mul 36 moveto (*/) show
8 mp_a_x mul 12 moveto (// SANITY \(parity\) CHECK ) show
8 mp_a_x mul 0 moveto (// Check to see if the roundoff error is enough to make an odd number.) show
grestore
restore
showpage
%%Page: 7 7
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 13) stringwidth pop sub 3 sub 796 moveto (Page 13) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
8 mp_a_x mul 780 moveto (// \(This should detect roughly half of the roundoff errors!\)) show
8 mp_a_x mul 768 moveto (mpz_class even_testnum = mpz_class\(Val + 0.5\);) show
8 mp_a_x mul 756 moveto (if \(even_testnum % 2 != 0\) {) show
10 mp_a_x mul 744 moveto (cout << " Using x = " << x << endl;) show
10 mp_a_x mul 732 moveto (cout << " x[1] = " << x[1] << endl;) show
10 mp_a_x mul 720 moveto (cout << " x[2] = " << x[2] << endl;) show
10 mp_a_x mul 708 moveto (cout << " x[3] = " << x[3] << endl;) show
10 mp_a_x mul 696 moveto (cout << " This has value " << Val << endl;) show
10 mp_a_x mul 684 moveto (cout << " even_testnum = " << even_testnum << endl;) show
8 mp_a_x mul 672 moveto (}) show
8 mp_a_x mul 660 moveto (assert\(even_testnum % 2 == 0\);) show
8 mp_a_x mul 624 moveto (// Set the entry in our Theta_Series) show
8 mp_a_x mul 612 moveto (//    cout << " About to set the value for p = " << p << endl; ) show
8 mp_a_x mul 600 moveto (mpz_class norm = mpz_class\(Val/2 + 0.5\);        // This does the appropr) show
0 588 moveto (iate rounding! =\)) show
8 mp_a_x mul 576 moveto (//    cout << " Converted p/2 into the number norm = " << norm << endl;) show
8 mp_a_x mul 564 moveto (Theta_Series.set_value\(norm\);) show
8 mp_a_x mul 552 moveto (/*) show
10 mp_a_x mul 540 moveto (cout << " Finished setting the index for ThetaSeries[" << norm << "]" ) show
0 528 moveto (<< endl;) show
10 mp_a_x mul 516 moveto (cout << endl << endl;) show
8 mp_a_x mul 504 moveto (*/) show
8 mp_a_x mul 480 moveto (// NICE SANITY CHECK FOR LARGE NUMBERS: We could test each p to make sur) show
0 468 moveto (e it's even! =\)) show
6 mp_a_x mul 444 moveto (}) show
4 mp_a_x mul 420 moveto (}) show
2 mp_a_x mul 396 moveto (}) show
2 mp_a_x mul 360 moveto (return Theta_Series;) show
0 336 moveto (}) show
0 240 moveto (// Compute the theta function by importing \(and simplifying\) the original PARI c) show
0 228 moveto (ode!) show
0 216 moveto (boolean_theta Theta_PARI_3_new_Approximate_Ternary_mpz\(const Matrix_mpz & Q, con) show
0 204 moveto (st mpz_class & precision, const float & approx_size\) {) show
2 mp_a_x mul 180 moveto (// Make the theta series, and set zero.) show
2 mp_a_x mul 168 moveto (boolean_theta Theta_Series\(Q, precision\);    // WARNING: This assumes the prec) show
0 156 moveto (ision of half of the maximum allowed!  ) show
2 mp_a_x mul 144 moveto (Theta_Series.set_value\(0\);) show
2 mp_a_x mul 120 moveto (// Note: We assume that pari_init\(...\) was run at the beginning of the program) show
0 108 moveto (!) show
2 mp_a_x mul 96 moveto (extern pari_sp avma;) show
2 mp_a_x mul 72 moveto (// PARI Stack placeholder) show
2 mp_a_x mul 60 moveto (pari_sp av0 = avma;) show
2 mp_a_x mul 24 moveto (// Make an array of double for the Cholesky decompostion of our matrix) show
2 mp_a_x mul 12 moveto (GEN A = Matrix_mpz__to__PARI\(Q\);) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 14) stringwidth pop sub 3 sub 796 moveto (Page 14) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (// Compute the LLL Basis for A) show
2 mp_a_x mul 768 moveto (GEN U = lllgramint\(A\);) show
2 mp_a_x mul 756 moveto (/*) show
4 mp_a_x mul 744 moveto (// DIAGNSOTIC:) show
4 mp_a_x mul 732 moveto (cout << " lg\(U\) = " << lg\(U\) << endl;) show
4 mp_a_x mul 720 moveto (cout << " Q.NumRows\(\) = " << Q.NumRows\(\) << endl;) show
2 mp_a_x mul 708 moveto (*/) show
2 mp_a_x mul 696 moveto (if \(lg\(U\) != Q.NumRows\(\)+1\) ) show
4 mp_a_x mul 684 moveto (err\(talker, "Dude, your matrix is not positive definite! =\("\);) show
2 mp_a_x mul 660 moveto (// Put A in LLL reduced form) show
2 mp_a_x mul 648 moveto (//A = U^T * A * U) show
2 mp_a_x mul 636 moveto (A = qf_base_change\(A,U,1\);) show
2 mp_a_x mul 624 moveto (cout << " The LLL reduction of this matrix is given by:" << endl;) show
2 mp_a_x mul 612 moveto (outmat\(A\);) show
2 mp_a_x mul 576 moveto (// Recreate the matrix) show
2 mp_a_x mul 564 moveto (mpz_class q11\(gtolong\(gcoeff\(A,1,1\)\)\);) show
2 mp_a_x mul 552 moveto (mpz_class q22\(gtolong\(gcoeff\(A,2,2\)\)\);) show
2 mp_a_x mul 540 moveto (mpz_class q33\(gtolong\(gcoeff\(A,3,3\)\)\);) show
2 mp_a_x mul 516 moveto (mpz_class q12\(2 * gtolong\(gcoeff\(A,1,2\)\)\);) show
2 mp_a_x mul 504 moveto (mpz_class q13\(2 * gtolong\(gcoeff\(A,1,3\)\)\);) show
2 mp_a_x mul 492 moveto (mpz_class q23\(2 * gtolong\(gcoeff\(A,2,3\)\)\);) show
2 mp_a_x mul 444 moveto (// Delare some local variables) show
2 mp_a_x mul 432 moveto (long n = Q.NumRows\(\), i, j, k;) show
2 mp_a_x mul 420 moveto (double BOUND =  2 * precision.get_d\(\) + 0.0001; ) show
2 mp_a_x mul 408 moveto (vector<mpz_class> x\(4\); ) show
2 mp_a_x mul 396 moveto (mpz_class Val, y2, y3;) show
2 mp_a_x mul 348 moveto (// Reset the PARI stack) show
2 mp_a_x mul 336 moveto (avma = av0;) show
2 mp_a_x mul 288 moveto (/*) show
2 mp_a_x mul 276 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 264 moveto (cout << " Precision = " << precision << endl;  // WARNING: This is a unsigned ) show
0 252 moveto (long, so its biggest value is about 4.2 * 10^9 !) show
2 mp_a_x mul 240 moveto (cout << " BOUND = " << BOUND << endl;) show
2 mp_a_x mul 228 moveto (*/) show
2 mp_a_x mul 180 moveto (// Check for a precision overflow \(10^12\)) show
2 mp_a_x mul 168 moveto (mpz_class THOUSAND\(1000\);) show
2 mp_a_x mul 156 moveto (mpz_class PRECISON_OVERFLOW = THOUSAND * THOUSAND * THOUSAND * THOUSAND;) show
2 mp_a_x mul 144 moveto (assert\( precision <= PRECISON_OVERFLOW\);    // THIS NEEDS TO BE MODIFIED TO DE) show
0 132 moveto (CIDE THE CORRECT CUTOFF!! =\)) show
2 mp_a_x mul 72 moveto (// Set some bounds before starting the main loop) show
2 mp_a_x mul 60 moveto (float APPROX_SIZE = approx_size;   // THIS DETERMINES THE AMOUNT WE TRUNCATE I) show
0 48 moveto (N THE APPROXIMATE ROUTINE! \(Default = 500.\)) show
2 mp_a_x mul 36 moveto (//  k = n; y[n] = z[n] = 0;) show
2 mp_a_x mul 24 moveto (//x[n] = \(long\) ceil\(sqrt\(BOUND/v[n]\)\);) show
2 mp_a_x mul 0 moveto (//   /*) show
grestore
restore
showpage
%%Page: 8 8
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 15) stringwidth pop sub 3 sub 796 moveto (Page 15) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 768 moveto (cout << " BOUND/v[n] = " << \(BOUND/q33.get_d\(\)\) << endl;) show
2 mp_a_x mul 756 moveto (cout << " sqrt\(BOUND/v[n]\) = " << sqrt\(BOUND/q33.get_d\(\)\) << endl;) show
2 mp_a_x mul 744 moveto (cout << " ceil\(sqrt\(BOUND/v[n]\)\) = " << ceil\(sqrt\(BOUND/q33.get_d\(\)\)\) << endl;) show
2 mp_a_x mul 732 moveto (cout << " \(long\) ceil\(sqrt\(BOUND/v[n]\)\) = " << \(\(long\) ceil\(sqrt\(BOUND/q33.get) show
0 720 moveto (_d\(\)\)\)\) << endl;) show
2 mp_a_x mul 708 moveto (//   */) show
2 mp_a_x mul 672 moveto (// Sanity Check -- make sure it's a ternary form!) show
2 mp_a_x mul 660 moveto (assert\(n==3\);) show
2 mp_a_x mul 636 moveto (// Loop through all vectors in the cylinder to make the approximate theta func) show
0 624 moveto (tion! =\)) show
2 mp_a_x mul 612 moveto (// ---------------------------------------------------------------------------) show
0 600 moveto (--------) show
2 mp_a_x mul 588 moveto (for\(x[3] = \(long\) ceil\(sqrt\(BOUND/q33.get_d\(\)\)\); x[3] >= 0; x[3]--\) {) show
4 mp_a_x mul 564 moveto (// Make the cumulative value y3 from x) show
4 mp_a_x mul 552 moveto (y3 = q33 * x[3] * x[3];) show
4 mp_a_x mul 516 moveto (for\(x[2] = 0; x[2] <= APPROX_SIZE; x[2]++\) {) show
6 mp_a_x mul 492 moveto (// Make the cumulative value y2 from x and y3) show
6 mp_a_x mul 480 moveto (y2 = q22*x[1]*x[1]  + q23*x[2]*x[3] + y3;) show
6 mp_a_x mul 444 moveto (for\(x[1] = 0; x[1] <= APPROX_SIZE; x[1]++\) {) show
8 mp_a_x mul 420 moveto (// Make the cumulative value Val from x and y2) show
8 mp_a_x mul 408 moveto (Val = q11*x[1]*x[1]  + q12*x[1]*x[2] + q13*x[1]*x[3] + y2;) show
8 mp_a_x mul 372 moveto (/*) show
8 mp_a_x mul 360 moveto (// DIAGNOSTIC:) show
8 mp_a_x mul 348 moveto (cout << " Using x = " << x << endl;) show
8 mp_a_x mul 336 moveto (cout << " x[1] = " << x[1] << endl;) show
8 mp_a_x mul 324 moveto (cout << " x[2] = " << x[2] << endl;) show
8 mp_a_x mul 312 moveto (cout << " x[3] = " << x[3] << endl;) show
8 mp_a_x mul 300 moveto (cout << " This has value " << Val << endl;) show
8 mp_a_x mul 288 moveto (*/) show
8 mp_a_x mul 264 moveto (// SANITY \(parity\) CHECK ) show
8 mp_a_x mul 252 moveto (// Check to see if the roundoff error is enough to make an odd number.) show
8 mp_a_x mul 240 moveto (// \(This should detect roughly half of the roundoff errors!\)) show
8 mp_a_x mul 228 moveto (if \(Val % 2 != 0\) {) show
10 mp_a_x mul 216 moveto (cout << " Using x = " << x << endl;) show
10 mp_a_x mul 204 moveto (cout << " x[1] = " << x[1] << endl;) show
10 mp_a_x mul 192 moveto (cout << " x[2] = " << x[2] << endl;) show
10 mp_a_x mul 180 moveto (cout << " x[3] = " << x[3] << endl;) show
10 mp_a_x mul 168 moveto (cout << " This has value " << Val << endl;) show
8 mp_a_x mul 156 moveto (}) show
8 mp_a_x mul 144 moveto (assert\(Val % 2 == 0\);) show
8 mp_a_x mul 108 moveto (// Set the entry in our Theta_Series) show
8 mp_a_x mul 84 moveto (if \(Val <= BOUND\) {) show
10 mp_a_x mul 72 moveto (//    cout << " About to set the value for p = " << p << endl; ) show
10 mp_a_x mul 60 moveto (mpz_class norm = mpz_class\(Val/2\);   ) show
10 mp_a_x mul 48 moveto (//    cout << " Converted p/2 into the number norm = " << norm << endl) show
0 36 moveto (;) show
10 mp_a_x mul 24 moveto (Theta_Series.set_value\(norm\);) show
10 mp_a_x mul 12 moveto (/*) show
12 mp_a_x mul 0 moveto (cout << " Finished setting the index for ThetaSeries[" << norm << "]) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 16) stringwidth pop sub 3 sub 796 moveto (Page 16) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
0 780 moveto (" << endl;) show
12 mp_a_x mul 768 moveto (cout << endl << endl;) show
10 mp_a_x mul 756 moveto (*/) show
8 mp_a_x mul 744 moveto (}) show
8 mp_a_x mul 720 moveto (// NICE SANITY CHECK FOR LARGE NUMBERS: We could test each p to make sur) show
0 708 moveto (e it's even! =\)) show
6 mp_a_x mul 684 moveto (}) show
4 mp_a_x mul 660 moveto (}) show
2 mp_a_x mul 636 moveto (}) show
2 mp_a_x mul 600 moveto (return Theta_Series;) show
0 576 moveto (}) show
0 468 moveto (// ============================================== Slow Theta Function Routines =) show
0 456 moveto (============================================================) show
0 408 moveto (PowerSeries<mpz_class> Theta1\(const Matrix_mpz & Q, const mpz_class & precision\)) show
mp_a_x 396 moveto ({) show
2 mp_a_x mul 372 moveto (// Sanity check that the precision fits inside an unsigned long) show
2 mp_a_x mul 360 moveto (assert\(precision.fits_ulong_p\(\) == true\);) show
2 mp_a_x mul 324 moveto (PowerSeries<mpz_class> Theta_Series\(precision.get_ui\(\)\);) show
2 mp_a_x mul 276 moveto (// Define the value at zero to be -1, to avoid testing it all of the time! =\)) show
2 mp_a_x mul 264 moveto (Theta_Series[0] = -1;) show
2 mp_a_x mul 216 moveto (/*) show
2 mp_a_x mul 204 moveto (for\(long i=0; i < min\(100, precision\); i++\)) show
4 mp_a_x mul 192 moveto (cout << "i = " << i << "    Theta[i] = " << Theta_Series[i] << endl;) show
2 mp_a_x mul 180 moveto (*/) show
2 mp_a_x mul 132 moveto (cout << " This will compute the theta series by counting points quickly in a b) show
0 120 moveto (ox! =\) " << endl; ) show
2 mp_a_x mul 96 moveto (mpz_class desired_precision = precision;) show
2 mp_a_x mul 60 moveto (// Basic Sanity checks) show
2 mp_a_x mul 48 moveto (assert\(Q.IsSymmetric\(\) == true\);) show
2 mp_a_x mul 36 moveto (assert\(Q.NumRows\(\) == 3\);) show
2 mp_a_x mul 0 moveto (// For convenience, we define              ****** are these right???  don't we) show
grestore
restore
showpage
%%Page: 9 9
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 17) stringwidth pop sub 3 sub 796 moveto (Page 17) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
mp_a_x 780 moveto (need half of a, b, and c??? ******) show
2 mp_a_x mul 768 moveto (mpz_class a = Q\(1,1\)/2;) show
2 mp_a_x mul 756 moveto (mpz_class b = Q\(2,2\)/2;) show
2 mp_a_x mul 744 moveto (mpz_class c = Q\(3,3\)/2;) show
2 mp_a_x mul 732 moveto (mpz_class d = Q\(2,3\);) show
2 mp_a_x mul 720 moveto (mpz_class e = Q\(1,3\);) show
2 mp_a_x mul 708 moveto (mpz_class f = Q\(1,2\);) show
2 mp_a_x mul 684 moveto (mpz_class disc = 4*a*b*c + d*e*f - a*d*d - b*e*e - c*f*f + d*e*f;) show
2 mp_a_x mul 660 moveto (mpz_class w11 = 4*b*c - d*d;) show
2 mp_a_x mul 648 moveto (mpz_class w22 = 4*a*c - e*e;) show
2 mp_a_x mul 636 moveto (mpz_class w33 = 4*a*b - f*f;) show
2 mp_a_x mul 600 moveto (/*) show
2 mp_a_x mul 588 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 576 moveto (cout << " a = " << a << endl;) show
2 mp_a_x mul 564 moveto (cout << " b = " << b << endl;) show
2 mp_a_x mul 552 moveto (cout << " c = " << c << endl;) show
2 mp_a_x mul 540 moveto (cout << " d = " << d << endl;) show
2 mp_a_x mul 528 moveto (cout << " e = " << e << endl;) show
2 mp_a_x mul 516 moveto (cout << " f = " << f << endl;) show
2 mp_a_x mul 504 moveto (cout << endl;) show
2 mp_a_x mul 492 moveto (cout << " disc = " << disc << endl;) show
2 mp_a_x mul 480 moveto (cout << " w11 = " << w11 << endl;) show
2 mp_a_x mul 468 moveto (cout << " w22 = " << w22 << endl;) show
2 mp_a_x mul 456 moveto (cout << " w33 = " << w33 << endl;) show
2 mp_a_x mul 444 moveto (cout << endl;) show
2 mp_a_x mul 432 moveto (*/) show
2 mp_a_x mul 348 moveto (// Set variables for the range of numbers to check:) show
2 mp_a_x mul 336 moveto (// -------------------------------------------------  ) show
2 mp_a_x mul 312 moveto (//  mpz_class Bunch_Size = 1000000;   // One million) show
2 mp_a_x mul 300 moveto (//  mpz_class Bunch_Size = 100000;   // One Hundred Thousand) show
2 mp_a_x mul 288 moveto (mpz_class Bunch_Size = 10000;   // Ten Thousand) show
2 mp_a_x mul 276 moveto (mpz_class Save_Increment = 100000; // Save the computation after every hundred) show
mp_a_x 264 moveto (thousand numbers.) show
2 mp_a_x mul 240 moveto (mpz_class Checking_Min = 0;) show
2 mp_a_x mul 228 moveto (mpz_class Save_Target = Checking_Min + Save_Increment;  ) show
2 mp_a_x mul 192 moveto (set<mpz_class> eligible_set;) show
2 mp_a_x mul 156 moveto (// REPLACE THIS WITH SOMETHING THAT WORKS ON BUNCHES!!) show
2 mp_a_x mul 144 moveto (mpz_class Checking_Max = desired_precision;) show
4 mp_a_x mul 96 moveto (// Compute the bounds on vectors to check:) show
4 mp_a_x mul 84 moveto (// ---------------------------------------) show
4 mp_a_x mul 72 moveto (cout << "   Checking possible \(locally represented\) exceptions from " << Che) show
0 60 moveto (cking_Min << " to " << Checking_Max << " ---- ";) show
4 mp_a_x mul 24 moveto (// Approach #1: From Jagy) show
4 mp_a_x mul 12 moveto (mpz_class x_Max, y_Max, z_Max;) show
4 mp_a_x mul 0 moveto (x_Max = ceil\(sqrt\(abs\(Checking_Max.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\)\)\);) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 18) stringwidth pop sub 3 sub 796 moveto (Page 18) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
4 mp_a_x mul 780 moveto (y_Max = ceil\(sqrt\(abs\(Checking_Max.get_d\(\) * w22.get_d\(\) / disc.get_d\(\)\)\)\);) show
4 mp_a_x mul 768 moveto (z_Max = ceil\(sqrt\(abs\(Checking_Max.get_d\(\) * w33.get_d\(\) / disc.get_d\(\)\)\)\);) show
4 mp_a_x mul 744 moveto (//    /*  ) show
4 mp_a_x mul 732 moveto (// DIAGNOSTIC ) show
4 mp_a_x mul 720 moveto (cout << " w11 = " << w11 << "  " << w11.get_d\(\) << endl;) show
4 mp_a_x mul 708 moveto (cout << " w22 = " << w22 << "  " << w22.get_d\(\) << endl;) show
4 mp_a_x mul 696 moveto (cout << " w33 = " << w33 << "  " << w33.get_d\(\) << endl;) show
4 mp_a_x mul 684 moveto (cout << " disc = " << disc << "  " << disc.get_d\(\) << endl;) show
4 mp_a_x mul 672 moveto (//  cout << " precision = " << precision << "  " << precision.get_d\(\) << end) show
0 660 moveto (l;) show
4 mp_a_x mul 648 moveto (//  cout << " \(precision.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) = " << \(preci) show
0 636 moveto (sion.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) << endl;) show
4 mp_a_x mul 624 moveto (cout << " Checking_Max = " << Checking_Max << "  " << Checking_Max.get_d\(\) <) show
0 612 moveto (< endl;) show
4 mp_a_x mul 600 moveto (cout << " \(Checking_Max.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) = " << \(Checki) show
0 588 moveto (ng_Max.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) << endl;) show
4 mp_a_x mul 576 moveto (cout << endl;) show
4 mp_a_x mul 564 moveto (cout << " Using the bounds: " << endl;) show
4 mp_a_x mul 552 moveto (cout << " x_Max = " << x_Max << endl;) show
4 mp_a_x mul 540 moveto (cout << " y_Max = " << y_Max << endl;) show
4 mp_a_x mul 528 moveto (cout << " z_Max = " << z_Max << endl;) show
4 mp_a_x mul 516 moveto (cout << endl;  ) show
4 mp_a_x mul 504 moveto (// */) show
4 mp_a_x mul 456 moveto (// Cross out the eligible numbers) show
4 mp_a_x mul 444 moveto (// ------------------------------) show
4 mp_a_x mul 420 moveto (/*) show
4 mp_a_x mul 408 moveto (// Approach #1: Blindly cross out all numbers in an octant \(box\)) show
4 mp_a_x mul 396 moveto (mpz_class last_size = eligible_set.size\(\);) show
4 mp_a_x mul 384 moveto (mpz_class diag, D, E, F;) show
4 mp_a_x mul 372 moveto (for\(mpz_class x=0; \(x <= x_Max\) && \(eligible_set.empty\(\) == false\); x++\)) show
4 mp_a_x mul 360 moveto (for\(mpz_class y=0; \(y <= y_Max\) && \(eligible_set.empty\(\) == false\); y++\)) show
4 mp_a_x mul 348 moveto (for\(mpz_class z=0; \(z <= z_Max\) && \(eligible_set.empty\(\) == false\); z++\) {) show
4 mp_a_x mul 324 moveto (// Compute the diagonal and off-diagonal terms) show
4 mp_a_x mul 312 moveto (diag = a*x*x + b*y*y + c*z*z;) show
4 mp_a_x mul 300 moveto (D = d*y*z;) show
4 mp_a_x mul 288 moveto (E = e*x*z;) show
4 mp_a_x mul 276 moveto (F = f*x*y;) show
4 mp_a_x mul 252 moveto (// Compute and remove the 4 values) show
4 mp_a_x mul 240 moveto (eligible_set.erase\(diag + D + E + F\);) show
4 mp_a_x mul 228 moveto (eligible_set.erase\(diag - D - E + F\);   // switch z -> -z) show
4 mp_a_x mul 216 moveto (eligible_set.erase\(diag - D + E - F\);   // switch y -> -y) show
4 mp_a_x mul 204 moveto (eligible_set.erase\(diag + D - E - F\);   // switch x -> -x) show
4 mp_a_x mul 168 moveto (// Check if the size has dropped by 10,000) show
4 mp_a_x mul 156 moveto (if \(eligible_set.size\(\) < last_size - 10000\) {) show
4 mp_a_x mul 144 moveto (cout << " The current eligible exception set has size " << eligible_set.size) show
0 132 moveto (\(\) << endl;) show
4 mp_a_x mul 120 moveto (last_size = eligible_set.size\(\);) show
4 mp_a_x mul 108 moveto (}) show
4 mp_a_x mul 84 moveto (}) show
4 mp_a_x mul 72 moveto (*/) show
4 mp_a_x mul 24 moveto (// Approach #2: From Jagy's program) show
4 mp_a_x mul 12 moveto (mpz_class TRUANT, MAX_TARGET = Checking_Max;                       // <--- N) show
0 0 moveto (EED TO SET THESE! =\)) show
grestore
restore
showpage
%%Page: 10 10
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 19) stringwidth pop sub 3 sub 796 moveto (Page 19) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
4 mp_a_x mul 768 moveto (mpz_class dy_ex, axx_fxy_byy;) show
4 mp_a_x mul 756 moveto (mpz_class Big_Disc, Small_Disc;) show
4 mp_a_x mul 744 moveto (mpz_class Sqrt_Big_Disc, Sqrt_Small_Disc;) show
4 mp_a_x mul 732 moveto (mpz_class z1, z2, z3, z4;) show
4 mp_a_x mul 708 moveto (mpz_class last_size = 0;) show
4 mp_a_x mul 696 moveto (mpz_class diag, D, E, F;) show
4 mp_a_x mul 672 moveto (for\(mpz_class x=0; \(x <= x_Max\); x++\) ) show
6 mp_a_x mul 648 moveto (for\(mpz_class y=y_Max; \(y >= 0\); y--\) {) show
8 mp_a_x mul 624 moveto (dy_ex = d*y + e*x;                         // Temporary variable) show
8 mp_a_x mul 612 moveto (axx_fxy_byy = a*x*x + f*x*y + b*y*y;       // Temporary variable) show
8 mp_a_x mul 588 moveto (// Compute Big_Disc, Small_Disc, and TRUANT) show
8 mp_a_x mul 576 moveto (Big_Disc = \(dy_ex\) * \(dy_ex\)  - 4 * c * \(axx_fxy_byy - MAX_TARGET\);) show
8 mp_a_x mul 564 moveto (Small_Disc = \(dy_ex\) * \(dy_ex\)  - 4 * c * \(axx_fxy_byy - TRUANT\);) show
8 mp_a_x mul 552 moveto (TRUANT = 0;) show
8 mp_a_x mul 528 moveto (// Compute the bounds z1 -> z4) show
8 mp_a_x mul 516 moveto (if \(Big_Disc >= 0\) {) show
10 mp_a_x mul 504 moveto (Sqrt_Big_Disc = _Jagy_IntSqrt\(Big_Disc\);         // Temporary Variable) show
10 mp_a_x mul 480 moveto (z4 = \( -\(dy_ex\) + Sqrt_Big_Disc \) / \(2*c\);) show
10 mp_a_x mul 468 moveto (z1 = \( -\(dy_ex\) - Sqrt_Big_Disc \) / \(2*c\);) show
10 mp_a_x mul 444 moveto (z3 = -\(dy_ex\);) show
10 mp_a_x mul 432 moveto (z2 = z3;) show
10 mp_a_x mul 408 moveto (if \(Small_Disc >= 0\) {) show
12 mp_a_x mul 396 moveto (Sqrt_Small_Disc = _Jagy_IntSqrt\(Small_Disc\);   // Temporary Variable) show
12 mp_a_x mul 384 moveto (z3 = \( -\(dy_ex\) + Sqrt_Small_Disc \) / \(2*c\);) show
12 mp_a_x mul 372 moveto (z2 = \( -\(dy_ex\) - Sqrt_Small_Disc \) / \(2*c\);) show
10 mp_a_x mul 360 moveto (}) show
8 mp_a_x mul 336 moveto (}) show
8 mp_a_x mul 300 moveto (// 2 Loops for z:  z3 --> z4  and  z1 --> z2 ) show
8 mp_a_x mul 288 moveto (// ------------------------------------------) show
8 mp_a_x mul 276 moveto (for\(mpz_class z=z1; \(z <= z4\) ; z++\) {) show
10 mp_a_x mul 252 moveto (// Compute the diagonal and off-diagonal terms                        ) show
3 mp_a_x mul 240 moveto (// <--- Can speed this up! =\)) show
10 mp_a_x mul 228 moveto (diag = a*x*x + b*y*y + c*z*z;) show
10 mp_a_x mul 216 moveto (D = d*y*z;) show
10 mp_a_x mul 204 moveto (E = e*x*z;) show
10 mp_a_x mul 192 moveto (F = f*x*y;) show
10 mp_a_x mul 156 moveto (/*) show
10 mp_a_x mul 144 moveto (// DIAGNOSTIC:) show
10 mp_a_x mul 132 moveto (mpz_class test_num\(25\);) show
10 mp_a_x mul 120 moveto (if \(\(diag + D + E + F == test_num\) || \(diag - D - E + F == test_num\) |) show
0 108 moveto (| ) show
14 mp_a_x mul 96 moveto (\(diag - D + E - F == test_num\) || \(diag + D - E - F == test_num\)\) ) show
0 84 moveto ({) show
12 mp_a_x mul 72 moveto (cout << endl;) show
12 mp_a_x mul 60 moveto (cout << " Found the test number " << test_num << endl;) show
12 mp_a_x mul 48 moveto (cout << "   diag + D + E + F = " << \(diag + D + E + F\) << endl;) show
12 mp_a_x mul 36 moveto (cout << "   diag - D - E + F = " << \(diag - D - E + F\) << endl;) show
12 mp_a_x mul 24 moveto (cout << "   diag - D + E - F = " << \(diag - D + E - F\) << endl;) show
12 mp_a_x mul 12 moveto (cout << "   diag + D - E - F = " << \(diag + D - E - F\) << endl;) show
12 mp_a_x mul 0 moveto (cout << endl;) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 20) stringwidth pop sub 3 sub 796 moveto (Page 20) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
12 mp_a_x mul 780 moveto (cout << "   x = " << x << "   y = " << y << "   z = " << z << endl;) show
12 mp_a_x mul 768 moveto (cout << "   a = " << a << "   b = " << b << "   c = " << c << "   d ) show
0 756 moveto (= " << d << "   e = " << e << "   f = " << f << endl; ) show
12 mp_a_x mul 744 moveto (cout << "   diag = " << diag << "   D = " << D << "   E = " << E << ) show
0 732 moveto ("   F = " << F << endl;) show
12 mp_a_x mul 720 moveto (cout << endl;) show
10 mp_a_x mul 708 moveto (}) show
10 mp_a_x mul 696 moveto (*/) show
10 mp_a_x mul 648 moveto (// Compute and remove the 4 values) show
10 mp_a_x mul 636 moveto (if \(\(diag + D + E + F\) <= precision\)) show
12 mp_a_x mul 624 moveto (Theta_Series[mpz_class\(diag + D + E + F\).get_ui\(\)] += 2;) show
10 mp_a_x mul 612 moveto (if \(\(F != 0\) && \(\(diag - D - E + F\) <= precision\)\)) show
12 mp_a_x mul 600 moveto (Theta_Series[mpz_class\(diag - D - E + F\).get_ui\(\)] += 2;) show
10 mp_a_x mul 588 moveto (if \(\(E != 0\) && \(\(diag - D + E - F\) <= precision\)\)) show
12 mp_a_x mul 576 moveto (Theta_Series[mpz_class\(diag - D + E - F\).get_ui\(\)] += 2;) show
10 mp_a_x mul 564 moveto (if \(\(D != 0\) && \(\(diag + D - E - F\) <= precision\)\)) show
12 mp_a_x mul 552 moveto (Theta_Series[mpz_class\(diag + D - E - F\).get_ui\(\)] += 2;) show
10 mp_a_x mul 540 moveto (/*) show
10 mp_a_x mul 528 moveto (eligible_set.erase\(diag + D + E + F\);) show
10 mp_a_x mul 516 moveto (eligible_set.erase\(diag - D - E + F\);   // switch z -> -z) show
10 mp_a_x mul 504 moveto (eligible_set.erase\(diag - D + E - F\);   // switch y -> -y) show
10 mp_a_x mul 492 moveto (eligible_set.erase\(diag + D - E - F\);   // switch x -> -x) show
10 mp_a_x mul 480 moveto (*/) show
8 mp_a_x mul 456 moveto (}) show
6 mp_a_x mul 432 moveto (}) show
4 mp_a_x mul 360 moveto (/*) show
2 mp_a_x mul 348 moveto (for\(long i=0; i < min\(100, precision\); i++\)) show
4 mp_a_x mul 336 moveto (cout << "i = " << i << "    Theta[i] = " << Theta_Series[i] << endl;) show
4 mp_a_x mul 324 moveto (*/) show
2 mp_a_x mul 288 moveto (return Theta_Series;) show
0 228 moveto (}) show
0 156 moveto (boolean_theta Theta2\(const Matrix_mpz & Q, const mpz_class & precision\) {) show
2 mp_a_x mul 132 moveto (// Sanity check that the precision fits inside an unsigned long -- so the comp) show
0 120 moveto (utation doesn't take *way* too long!) show
2 mp_a_x mul 108 moveto (assert\(precision.fits_ulong_p\(\) == true\);) show
2 mp_a_x mul 72 moveto (boolean_theta Theta_Series\(Q, precision\);) show
2 mp_a_x mul 24 moveto (/*) show
2 mp_a_x mul 12 moveto (for\(long i=0; i < min\(100, precision\); i++\)) show
4 mp_a_x mul 0 moveto (cout << "i = " << i << "    Theta[i] = " << Theta_Series[i] << endl;) show
grestore
restore
showpage
%%Page: 11 11
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 21) stringwidth pop sub 3 sub 796 moveto (Page 21) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 780 moveto (*/) show
2 mp_a_x mul 732 moveto (cout << " This will compute the theta series by counting points quickly in a b) show
0 720 moveto (ox! =\) " << endl; ) show
2 mp_a_x mul 696 moveto (mpz_class desired_precision = precision;) show
2 mp_a_x mul 660 moveto (// Basic Sanity checks) show
2 mp_a_x mul 648 moveto (assert\(Q.IsSymmetric\(\) == true\);) show
2 mp_a_x mul 636 moveto (assert\(Q.NumRows\(\) == 3\);) show
2 mp_a_x mul 600 moveto (// For convenience, we define              ****** are these right???  don't we) show
mp_a_x 588 moveto (need half of a, b, and c??? ******) show
2 mp_a_x mul 576 moveto (mpz_class a = Q\(1,1\)/2;) show
2 mp_a_x mul 564 moveto (mpz_class b = Q\(2,2\)/2;) show
2 mp_a_x mul 552 moveto (mpz_class c = Q\(3,3\)/2;) show
2 mp_a_x mul 540 moveto (mpz_class d = Q\(2,3\);) show
2 mp_a_x mul 528 moveto (mpz_class e = Q\(1,3\);) show
2 mp_a_x mul 516 moveto (mpz_class f = Q\(1,2\);) show
2 mp_a_x mul 492 moveto (mpz_class disc = 4*a*b*c + d*e*f - a*d*d - b*e*e - c*f*f + d*e*f;) show
2 mp_a_x mul 468 moveto (mpz_class w11 = 4*b*c - d*d;) show
2 mp_a_x mul 456 moveto (mpz_class w22 = 4*a*c - e*e;) show
2 mp_a_x mul 444 moveto (mpz_class w33 = 4*a*b - f*f;) show
2 mp_a_x mul 408 moveto (/*) show
2 mp_a_x mul 396 moveto (// DIAGNOSTIC) show
2 mp_a_x mul 384 moveto (cout << " a = " << a << endl;) show
2 mp_a_x mul 372 moveto (cout << " b = " << b << endl;) show
2 mp_a_x mul 360 moveto (cout << " c = " << c << endl;) show
2 mp_a_x mul 348 moveto (cout << " d = " << d << endl;) show
2 mp_a_x mul 336 moveto (cout << " e = " << e << endl;) show
2 mp_a_x mul 324 moveto (cout << " f = " << f << endl;) show
2 mp_a_x mul 312 moveto (cout << endl;) show
2 mp_a_x mul 300 moveto (cout << " disc = " << disc << endl;) show
2 mp_a_x mul 288 moveto (cout << " w11 = " << w11 << endl;) show
2 mp_a_x mul 276 moveto (cout << " w22 = " << w22 << endl;) show
2 mp_a_x mul 264 moveto (cout << " w33 = " << w33 << endl;) show
2 mp_a_x mul 252 moveto (cout << endl;) show
2 mp_a_x mul 240 moveto (*/) show
2 mp_a_x mul 156 moveto (// Set variables for the range of numbers to check:) show
2 mp_a_x mul 144 moveto (// -------------------------------------------------  ) show
2 mp_a_x mul 120 moveto (//  mpz_class Bunch_Size = 1000000;   // One million) show
2 mp_a_x mul 108 moveto (//  mpz_class Bunch_Size = 100000;   // One Hundred Thousand) show
2 mp_a_x mul 96 moveto (mpz_class Bunch_Size = 10000;   // Ten Thousand) show
2 mp_a_x mul 84 moveto (mpz_class Save_Increment = 100000; // Save the computation after every hundred) show
mp_a_x 72 moveto (thousand numbers.) show
2 mp_a_x mul 48 moveto (mpz_class Checking_Min = 0;) show
2 mp_a_x mul 36 moveto (mpz_class Save_Target = Checking_Min + Save_Increment;  ) show
2 mp_a_x mul 0 moveto (set<mpz_class> eligible_set;) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 22) stringwidth pop sub 3 sub 796 moveto (Page 22) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
2 mp_a_x mul 756 moveto (// REPLACE THIS WITH SOMETHING THAT WORKS ON BUNCHES!!) show
2 mp_a_x mul 744 moveto (mpz_class Checking_Max = desired_precision;) show
4 mp_a_x mul 696 moveto (// Compute the bounds on vectors to check:) show
4 mp_a_x mul 684 moveto (// ---------------------------------------) show
4 mp_a_x mul 672 moveto (cout << "   Checking possible \(locally represented\) exceptions from " << Che) show
0 660 moveto (cking_Min << " to " << Checking_Max << " ---- ";) show
4 mp_a_x mul 624 moveto (// Approach #1: From Jagy) show
4 mp_a_x mul 612 moveto (mpz_class x_Max, y_Max, z_Max;) show
4 mp_a_x mul 600 moveto (x_Max = ceil\(sqrt\(abs\(Checking_Max.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\)\)\);) show
4 mp_a_x mul 588 moveto (y_Max = ceil\(sqrt\(abs\(Checking_Max.get_d\(\) * w22.get_d\(\) / disc.get_d\(\)\)\)\);) show
4 mp_a_x mul 576 moveto (z_Max = ceil\(sqrt\(abs\(Checking_Max.get_d\(\) * w33.get_d\(\) / disc.get_d\(\)\)\)\);) show
4 mp_a_x mul 552 moveto (//    /*  ) show
4 mp_a_x mul 540 moveto (// DIAGNOSTIC ) show
4 mp_a_x mul 528 moveto (cout << " w11 = " << w11 << "  " << w11.get_d\(\) << endl;) show
4 mp_a_x mul 516 moveto (cout << " w22 = " << w22 << "  " << w22.get_d\(\) << endl;) show
4 mp_a_x mul 504 moveto (cout << " w33 = " << w33 << "  " << w33.get_d\(\) << endl;) show
4 mp_a_x mul 492 moveto (cout << " disc = " << disc << "  " << disc.get_d\(\) << endl;) show
4 mp_a_x mul 480 moveto (//  cout << " precision = " << precision << "  " << precision.get_d\(\) << end) show
0 468 moveto (l;) show
4 mp_a_x mul 456 moveto (//  cout << " \(precision.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) = " << \(preci) show
0 444 moveto (sion.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) << endl;) show
4 mp_a_x mul 432 moveto (cout << " Checking_Max = " << Checking_Max << "  " << Checking_Max.get_d\(\) <) show
0 420 moveto (< endl;) show
4 mp_a_x mul 408 moveto (cout << " \(Checking_Max.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) = " << \(Checki) show
0 396 moveto (ng_Max.get_d\(\) * w11.get_d\(\) / disc.get_d\(\)\) << endl;) show
4 mp_a_x mul 384 moveto (cout << endl;) show
4 mp_a_x mul 372 moveto (cout << " Using the bounds: " << endl;) show
4 mp_a_x mul 360 moveto (cout << " x_Max = " << x_Max << endl;) show
4 mp_a_x mul 348 moveto (cout << " y_Max = " << y_Max << endl;) show
4 mp_a_x mul 336 moveto (cout << " z_Max = " << z_Max << endl;) show
4 mp_a_x mul 324 moveto (cout << endl;  ) show
4 mp_a_x mul 312 moveto (// */) show
4 mp_a_x mul 264 moveto (// Cross out the eligible numbers) show
4 mp_a_x mul 252 moveto (// ------------------------------) show
4 mp_a_x mul 228 moveto (/*) show
4 mp_a_x mul 216 moveto (// Approach #1: Blindly cross out all numbers in an octant \(box\)) show
4 mp_a_x mul 204 moveto (mpz_class last_size = eligible_set.size\(\);) show
4 mp_a_x mul 192 moveto (mpz_class diag, D, E, F;) show
4 mp_a_x mul 180 moveto (for\(mpz_class x=0; \(x <= x_Max\) && \(eligible_set.empty\(\) == false\); x++\)) show
4 mp_a_x mul 168 moveto (for\(mpz_class y=0; \(y <= y_Max\) && \(eligible_set.empty\(\) == false\); y++\)) show
4 mp_a_x mul 156 moveto (for\(mpz_class z=0; \(z <= z_Max\) && \(eligible_set.empty\(\) == false\); z++\) {) show
4 mp_a_x mul 132 moveto (// Compute the diagonal and off-diagonal terms) show
4 mp_a_x mul 120 moveto (diag = a*x*x + b*y*y + c*z*z;) show
4 mp_a_x mul 108 moveto (D = d*y*z;) show
4 mp_a_x mul 96 moveto (E = e*x*z;) show
4 mp_a_x mul 84 moveto (F = f*x*y;) show
4 mp_a_x mul 60 moveto (// Compute and remove the 4 values) show
4 mp_a_x mul 48 moveto (eligible_set.erase\(diag + D + E + F\);) show
4 mp_a_x mul 36 moveto (eligible_set.erase\(diag - D - E + F\);   // switch z -> -z) show
4 mp_a_x mul 24 moveto (eligible_set.erase\(diag - D + E - F\);   // switch y -> -y) show
4 mp_a_x mul 12 moveto (eligible_set.erase\(diag + D - E - F\);   // switch x -> -x) show
grestore
restore
showpage
%%Page: 12 12
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 23) stringwidth pop sub 3 sub 796 moveto (Page 23) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
4 mp_a_x mul 768 moveto (// Check if the size has dropped by 10,000) show
4 mp_a_x mul 756 moveto (if \(eligible_set.size\(\) < last_size - 10000\) {) show
4 mp_a_x mul 744 moveto (cout << " The current eligible exception set has size " << eligible_set.size) show
0 732 moveto (\(\) << endl;) show
4 mp_a_x mul 720 moveto (last_size = eligible_set.size\(\);) show
4 mp_a_x mul 708 moveto (}) show
4 mp_a_x mul 684 moveto (}) show
4 mp_a_x mul 672 moveto (*/) show
4 mp_a_x mul 624 moveto (// Approach #2: From Jagy's program) show
4 mp_a_x mul 612 moveto (mpz_class TRUANT, MAX_TARGET = Checking_Max;                       // <--- N) show
0 600 moveto (EED TO SET THESE! =\)) show
4 mp_a_x mul 576 moveto (mpz_class dy_ex, axx_fxy_byy;) show
4 mp_a_x mul 564 moveto (mpz_class Big_Disc, Small_Disc;) show
4 mp_a_x mul 552 moveto (mpz_class Sqrt_Big_Disc, Sqrt_Small_Disc;) show
4 mp_a_x mul 540 moveto (mpz_class z1, z2, z3, z4;) show
4 mp_a_x mul 516 moveto (mpz_class last_size = 0;) show
4 mp_a_x mul 504 moveto (mpz_class diag, D, E, F;) show
4 mp_a_x mul 480 moveto (for\(mpz_class x=0; \(x <= x_Max\); x++\) ) show
6 mp_a_x mul 456 moveto (for\(mpz_class y=y_Max; \(y >= 0\); y--\) {) show
8 mp_a_x mul 432 moveto (dy_ex = d*y + e*x;                         // Temporary variable) show
8 mp_a_x mul 420 moveto (axx_fxy_byy = a*x*x + f*x*y + b*y*y;       // Temporary variable) show
8 mp_a_x mul 396 moveto (// Compute Big_Disc, Small_Disc, and TRUANT) show
8 mp_a_x mul 384 moveto (Big_Disc = \(dy_ex\) * \(dy_ex\)  - 4 * c * \(axx_fxy_byy - MAX_TARGET\);) show
8 mp_a_x mul 372 moveto (Small_Disc = \(dy_ex\) * \(dy_ex\)  - 4 * c * \(axx_fxy_byy - TRUANT\);) show
8 mp_a_x mul 360 moveto (TRUANT = 0;) show
8 mp_a_x mul 336 moveto (// Compute the bounds z1 -> z4) show
8 mp_a_x mul 324 moveto (if \(Big_Disc >= 0\) {) show
10 mp_a_x mul 312 moveto (Sqrt_Big_Disc = _Jagy_IntSqrt\(Big_Disc\);         // Temporary Variable) show
10 mp_a_x mul 288 moveto (z4 = \( -\(dy_ex\) + Sqrt_Big_Disc \) / \(2*c\);) show
10 mp_a_x mul 276 moveto (z1 = \( -\(dy_ex\) - Sqrt_Big_Disc \) / \(2*c\);) show
10 mp_a_x mul 252 moveto (z3 = -\(dy_ex\);) show
10 mp_a_x mul 240 moveto (z2 = z3;) show
10 mp_a_x mul 216 moveto (if \(Small_Disc >= 0\) {) show
12 mp_a_x mul 204 moveto (Sqrt_Small_Disc = _Jagy_IntSqrt\(Small_Disc\);   // Temporary Variable) show
12 mp_a_x mul 192 moveto (z3 = \( -\(dy_ex\) + Sqrt_Small_Disc \) / \(2*c\);) show
12 mp_a_x mul 180 moveto (z2 = \( -\(dy_ex\) - Sqrt_Small_Disc \) / \(2*c\);) show
10 mp_a_x mul 168 moveto (}) show
8 mp_a_x mul 144 moveto (}) show
8 mp_a_x mul 108 moveto (// 2 Loops for z:  z3 --> z4  and  z1 --> z2 ) show
8 mp_a_x mul 96 moveto (// ------------------------------------------) show
8 mp_a_x mul 84 moveto (for\(mpz_class z=z1; \(z <= z4\) ; z++\) {) show
10 mp_a_x mul 60 moveto (// Compute the diagonal and off-diagonal terms                        ) show
3 mp_a_x mul 48 moveto (// <--- Can speed this up! =\)) show
10 mp_a_x mul 36 moveto (diag = a*x*x + b*y*y + c*z*z;) show
10 mp_a_x mul 24 moveto (D = d*y*z;) show
10 mp_a_x mul 12 moveto (E = e*x*z;) show
10 mp_a_x mul 0 moveto (F = f*x*y;) show
grestore
gsave
40 385 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 24) stringwidth pop sub 3 sub 796 moveto (Page 24) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
10 mp_a_x mul 756 moveto (/*) show
10 mp_a_x mul 744 moveto (// DIAGNOSTIC:) show
10 mp_a_x mul 732 moveto (mpz_class test_num\(25\);) show
10 mp_a_x mul 720 moveto (if \(\(diag + D + E + F == test_num\) || \(diag - D - E + F == test_num\) |) show
0 708 moveto (| ) show
14 mp_a_x mul 696 moveto (\(diag - D + E - F == test_num\) || \(diag + D - E - F == test_num\)\) ) show
0 684 moveto ({) show
12 mp_a_x mul 672 moveto (cout << endl;) show
12 mp_a_x mul 660 moveto (cout << " Found the test number " << test_num << endl;) show
12 mp_a_x mul 648 moveto (cout << "   diag + D + E + F = " << \(diag + D + E + F\) << endl;) show
12 mp_a_x mul 636 moveto (cout << "   diag - D - E + F = " << \(diag - D - E + F\) << endl;) show
12 mp_a_x mul 624 moveto (cout << "   diag - D + E - F = " << \(diag - D + E - F\) << endl;) show
12 mp_a_x mul 612 moveto (cout << "   diag + D - E - F = " << \(diag + D - E - F\) << endl;) show
12 mp_a_x mul 600 moveto (cout << endl;) show
12 mp_a_x mul 588 moveto (cout << "   x = " << x << "   y = " << y << "   z = " << z << endl;) show
12 mp_a_x mul 576 moveto (cout << "   a = " << a << "   b = " << b << "   c = " << c << "   d ) show
0 564 moveto (= " << d << "   e = " << e << "   f = " << f << endl; ) show
12 mp_a_x mul 552 moveto (cout << "   diag = " << diag << "   D = " << D << "   E = " << E << ) show
0 540 moveto ("   F = " << F << endl;) show
12 mp_a_x mul 528 moveto (cout << endl;) show
10 mp_a_x mul 516 moveto (}) show
10 mp_a_x mul 504 moveto (*/) show
10 mp_a_x mul 456 moveto (// Compute and remove the 4 values) show
10 mp_a_x mul 444 moveto (if \(\(diag + D + E + F\) <= precision\)) show
12 mp_a_x mul 432 moveto (Theta_Series.set_value\(mpz_class\(diag + D + E + F\).get_ui\(\)\);) show
10 mp_a_x mul 420 moveto (if \(\(F != 0\) && \(\(diag - D - E + F\) <= precision\)\)) show
12 mp_a_x mul 408 moveto (Theta_Series.set_value\(mpz_class\(diag - D - E + F\).get_ui\(\)\);) show
10 mp_a_x mul 396 moveto (if \(\(E != 0\) && \(\(diag - D + E - F\) <= precision\)\)) show
12 mp_a_x mul 384 moveto (Theta_Series.set_value\(mpz_class\(diag - D + E - F\).get_ui\(\)\);) show
10 mp_a_x mul 372 moveto (if \(\(D != 0\) && \(\(diag + D - E - F\) <= precision\)\)) show
12 mp_a_x mul 360 moveto (Theta_Series.set_value\(mpz_class\(diag + D - E - F\).get_ui\(\)\);) show
10 mp_a_x mul 348 moveto (/*) show
10 mp_a_x mul 336 moveto (eligible_set.erase\(diag + D + E + F\);) show
10 mp_a_x mul 324 moveto (eligible_set.erase\(diag - D - E + F\);   // switch z -> -z) show
10 mp_a_x mul 312 moveto (eligible_set.erase\(diag - D + E - F\);   // switch y -> -y) show
10 mp_a_x mul 300 moveto (eligible_set.erase\(diag + D - E - F\);   // switch x -> -x) show
10 mp_a_x mul 288 moveto (*/) show
8 mp_a_x mul 264 moveto (}) show
6 mp_a_x mul 240 moveto (}) show
4 mp_a_x mul 168 moveto (/*) show
2 mp_a_x mul 156 moveto (for\(long i=0; i < min\(100, precision\); i++\)) show
4 mp_a_x mul 144 moveto (cout << "i = " << i << "    Theta[i] = " << Theta_Series[i] << endl;) show
4 mp_a_x mul 132 moveto (*/) show
2 mp_a_x mul 96 moveto (return Theta_Series;) show
0 36 moveto (}) show
grestore
restore
showpage
%%Page: 13 13
save
0 setlinewidth
40 18 moveto 0 734 rlineto
554 0 rlineto 0 -734 rlineto closepath stroke
40 385 moveto 554 0 rlineto stroke
gsave
40 752 translate
-90 rotate
0 0 moveto 0 554 rlineto 367 0 rlineto 0 -554 rlineto closepath clip
367 80 mp_a_x mul div 554 808 div scale
newpath 0 792 moveto 80 mp_a_x mul 0 rlineto stroke
headerfont setfont
3 796 moveto (Fri Jul 15 01:56:18 2005) show
80 mp_a_x mul dup (Page 25) stringwidth pop sub 3 sub 796 moveto (Page 25) show
fnamefont setfont
(Theta.cc) stringwidth pop sub 2 div 796 moveto
(Theta.cc) show
4 7 translate 359 367 div 784 792 div scale
textfont setfont
0 744 moveto (// Jagy's IntSqrt routine used for his ternary exception finder. =\)) show
0 732 moveto (// \(This returns the largest integer x so that x^2 < n.\)                    <===) show
0 720 moveto (==  CHECK THIS... the end is confusing...) show
0 708 moveto (inline ) show
0 696 moveto (mpz_class _Jagy_IntSqrt\(const mpz_class & n\) {) show
2 mp_a_x mul 672 moveto (// Check if x=1) show
2 mp_a_x mul 660 moveto (if \(n<=0\) ) show
4 mp_a_x mul 648 moveto (return 0;) show
2 mp_a_x mul 636 moveto (else if \(n<=3\)) show
4 mp_a_x mul 624 moveto (return 1;) show
2 mp_a_x mul 600 moveto (else {) show
4 mp_a_x mul 588 moveto (mpz_class oldroot = 1;) show
4 mp_a_x mul 576 moveto (mpz_class root = n;) show
4 mp_a_x mul 552 moveto (// Do Newton's method to find an approximate root??) show
4 mp_a_x mul 540 moveto (while \(abs\(root-oldroot\) > 5\) {) show
6 mp_a_x mul 528 moveto (oldroot = root;) show
6 mp_a_x mul 516 moveto (root = \(\(n / root\) + root\) / 2;) show
4 mp_a_x mul 504 moveto (}) show
4 mp_a_x mul 480 moveto (// Find the) show
4 mp_a_x mul 468 moveto (while \(root * root < n\)) show
6 mp_a_x mul 456 moveto (root++;) show
4 mp_a_x mul 432 moveto (while \(root * root > n\)) show
6 mp_a_x mul 420 moveto (root--;) show
4 mp_a_x mul 396 moveto (return root;) show
2 mp_a_x mul 384 moveto (}) show
0 360 moveto (}) show
grestore
restore
showpage
%%Trailer
%%Pages: 13
